tb2$age[grep("51-55", tb$age)] = 51/2 + 55/2
tb2$age[grep("56-60", tb$age)] = 56/2 + 60/2
#> grep("56-60", tb$age)
# [1]   6  12  84  88 104 112 129 130 131 132 133 156 162 163 185 216 219
tb2$age[grep("More than 60 years", tb$age)] = 65
table(tb$age) #table is a very useful function (command) for tabulation
table(tb2$age)
summary(tb2$age)
#Visualize the data
table(tb2$age, tb2$gender)
boxplot( tb2$age ~ tb2$gender)
#histogram of age
hist(tb2$age)
###country
table( tb$country )  #All the inputed 'countries'
tb2$country = 0  #for non-USA countries
tb2$country[tb$country=='United States'] = 1
table( tb2$country )
#have a look at some entries
head(tb2)
#double-check the columns
names(tb2)
### Here are the columns for the 3 categories
metrics = c("shaq", "kilo", "mm", "inseam", "weather")
sciLiteracy = c("light", "fossil", "food", "electronCharge",
"earlyHuman", "laser", "continents", "antibiotics",
"electronSize", "earthCenter")
sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
tb2$shaq = 0
tb2$shaq[ tb$shaq=='Yes' ] = 1
tb2$shaq[ tb$shaq=='No' ] = 0
table(tb2$shaq)
tb2$kilo = 0
tb2$kilo[ tb$kilo=='1000 x' ] = 1
table(tb2$kilo)
tb2$mm=0
tb2$mm[ tb$mm==0.145 ] = 1
table(tb2$mm)
table(tb$mm)
tb2$inseam = 0
tb2$inseam[tb$inseam=="This person is short"] = 1
tb2$inseam[tb$inseam=="This person is tall"] = 0
table(tb2$inseam)
tb2$weather = 0
tb2$weather[tb$weather=="A Short sleeve shirt"] = 1
#tb2$weather[tb$weather=="A winter coat"] = 0
#tb2$weather[tb$weather=="A light jacket"] = 0
table(tb$weather)
table(tb2$weather)
######### summarize the metric proficiency score
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
#metric total score
tb2$metric = apply( tb2[, metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=4)
tb2$metric[tb2$gender=='Female']
tb = read.csv("4cities.csv", row.names=1);
list.files()
tb.ori = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
tb.ori = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
rm( list=ls()) #clean up worksapce
list.files()
tb.ori = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
?str
help(str)
str(tb.ori);
rm( list=ls()) #clean up worksapce
list.files()
tb = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
?str
help(str)
str(tb);
#indexing features of R
tb[1:5, 2:3]
tb$age #what does mean?
#tb$age[?] #try for 5th row in age
#correct some input errors
# If there is no input of 'age'
tb$age[is.na(tb$age)] = 'Do not wish to answer'
table(tb$age)
?table
# If there is no input of 'age'
tb$degree [is.na(tb$degree)] = 'Do not wish to answer'
table(tb$degree)
tb$gender[tb$gender=='']='Do not wish to answer'
table(tb$gender)
#correct some input errors
# If there is no input of 'age'
tb$age[is.na(tb$age)] = 'Do not wish to answer'
table(tb$age)
?table
# If there is no input of 'age'
tb$degree [is.na(tb$degree)] = 'Do not wish to answer'
table(tb$degree)
tb$gender[tb$gender=='']='Do not wish to answer'
table(tb$gender)
summary(tb)
head(tb)
for ( i in 1:3) print(i);
install.packages(c("ape", "seqinr"))
#### a function calls another function
even_total = function( x ) {
x = take_even(x);
sum(x);
}
x = c( 1,2,3,4 );
u = even_total( x );
for ( i in 1:3) print(i);
for ( i in c(0.5, 1, -2, 5) ) print(i);
i=2;
while( i<=10 ) {
print(i);
i = i + 2;
}
x = 1.5;
#if ((x<1) & (x>0)) {
if ((x<0) | (x>1)) {
print("X is not between 0 and 1");
} else {
print("X is between 0 and 1 ");
}
x =0.5;
if ( ( ! x>1) & ( ! x<0 ) ) {
print("x is between 0 and 1");
}
if ( x == 0.5 ) {
print("50%");
}
x= -1;
if ( ! x<0 ) {
print("non-negative");
} else {
print("negative");
}
y = ifelse( x<0, -x, x );
# assign abosulte value of x to y
#### a function
x = c( 1,2,3,4); #this is a global variable
#x = c(5, 4, 3, 6, 10, 12)
take_even = function( x ) {
y = c(); # a locale copy inside of loop
for( i in 1:length(x)) {
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
}
y; #the last line, return y to the main program
}
y = take_even(x); # c(2,4)
z = take_even(x); # c(2,4);
w = take_even(1:10); #c (2,4,6,8,10)
u = -5:10;
v = take_even(u); # -4 -2  0  2  4  6  8 10
take_even(c(5,4,10,11, 100, -3, 9, 0, 3333, 5524234234))
#### a function calls another function
even_total = function( x ) {
x = take_even(x);
sum(x);
}
x = c( 1,2,3,4 );
u = even_total( x );
print(u)
# x will be changed if the following line is run.
x = take_even(x)
#### a function calls another function
even_total = function( x ) {
x = take_even(x);
sum(x);
}
x = c( 1,2,3,4, 0, -2, -4 );
u = even_total( x );
print(u)
# x will be changed if the following line is run.
x = take_even(x)
#### scope of variable
x = c( 1,2,3,4); #this is a global variable
y = c(-1, -2, -3, -4)# this is also a global one
y.outside = y;
take_uphalf = function( x ) {
y = c(); # a local copy inside of loop
xbar = mean(x);
for( i in 1:length(x)) {
if ( x[i] > xbar ) {
y = c(y, x[i] );
}
}
y.inside = y;
y; #the last line, return y to the main program
}
w = take_uphalf(x);
rm(list=ls()) #clearn my workspace
tb = read.csv("Carlson_Yeast.csv");
rm(list=ls()) #clearn my workspace
tb = read.csv("Carlson_Yeast.csv");
View(tb)
plot( tb$Amount ~ tb$Hours );
plot( Amount ~ Hours, data=tb );
plot( Amount ~ Hours, data=tb, type="b",
main="Carlson growth curve" );
##### the second data set, multiple plots
tb2 = read.csv( "Carlson2.csv" );
##first try, not pretty
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
View(tb2)
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red" );
##add legends
legend(2,500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1) )
##### plot sunflower seed data
sunflower = read.csv("SunflowerSeedData.csv");
plot( sunflower$Stripes ~ sunflower$Seeds, ylab="Stripes"
, xlab="Seeds", main="sunflower data", type="l"
, col="red"
)
x= seq(1:30)
y= x^2;
write.csv(x, "x.csv", row.names=F)
write.csv(y, "y.csv", row.names=F)
output = cbind(x, y)
write.csv(output, "xy.csv", row.names=F)
plot( y ~ x, pch=x )
plot( 1:20 ~ 1:20, pch=1:20)
x = 1:30
y = 1:30
plot( y ~x, pch=x)
x= seq(1:30)
y= x^2;
write.csv(x, "x.csv", row.names=F)
write.csv(y, "y.csv", row.names=F)
output = cbind(x, y)
write.csv(output, "xy-20190530.csv", row.names=F)
plot( y ~ x, pch=x )
?write.csv()
list.files()
# colClass specify that all columns will be treated as characters for now.
tb.ori = read.csv("metric_survey_data.csv", colClass=rep("character", 24))
?str
str(tb.ori);
tb.ori$Timestamp
tb = tb.ori  #make a copy because we will modify the table.
names(tb.ori)
?names
#rename the columns with shortter names for convenience
names(tb) = c("time","gender", "age", "degree", "country", "light", "shaq", "fossil", "kilo", "mm",
"food","inseam", "weather","electronCharge","earlyHuman",
"laser", "continents", "antibiotics", "electronSize","earthCenter",
"religiousView","dailyLife","SciOnLife", "SciEffect")
str(tb)
cbind (names(tb), substr(names(tb.ori), 1, 20))
?cbind
cbind (names(tb), substr(names(tb.ori), 1, 30))
?cbind
View(tb.ori)
?apply(array, margin, ...)
View(sunflower)
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
rm(list=ls())
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
View(Kdata)
View(fitness)
View(pairs)
str(pairs)
#make sure gene names are treated as letters, not fake numbers (factors)
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# How do we know that ORF1 and 2 are now letters?
# ... ...
Kdata$orfname = as.character(Kdata$orfname)
View(pairs)
ids = c(pairs$ORF1, pairs$ORF2); #merged two columns into one
degree = table( ids );  #tabulate the occurence of each element
# quality check
sum(degree); #check the counting result, the length of ids
length(ids)
View(fitness)
View(Kdata)
View(fitness)
2+2
2+2
35.46 *1.18
10-7
27/3.0
35.46 *1.18
1+3
pi^2
View(tb)
rm(list=ls())
#3^2
3^2
pi
pi^2
3.141593 * 3.141593
10-7
27/3.0
35.46 *1.18
1+3
#natural log, No 'ln'
log10(100)
exp(0)
sqrt(100)
1:10
5:15
x <- 1:10;  # = means assignment, x will stay in memory
x <- 5:19;  # = means assignment, x will stay in memory
x <- 5:9;  # = means assignment, x will stay in memory
#these are arrays (vectors)
#x = seq(0,10, 0.1)
#x;
x <- 5:9;  # = means assignment, x will stay in memory
x;
1:15 #no assignment, no results stay in memory
z <- 1:15
#these are arrays (vectors)
#x = seq(0,10, 0.1)
#x;
x <- 5:9  # = means assignment, x will stay in memory
x
1:15 #no assignment, no results stay in memory
z <- 1:15
x = 3:10
x
length(x)  #length() is an function in R
#Q what does length() do?
help(length)
x = 3:10
x+1 #no assignment
x = x * 2; # what happens to x?
#The difference bw theese two lines is an important computing concept
# x =x+1, assign a new value from righthandside to the lefthandside.
x;
y = x+4
#simple plot
plot( y ~ x );
plot( x ~ y )
plot( y ~ x );
plot( x ~ y )
y = x+4
#simple plot
plot( y ~ x, main= "y ~ x" );
plot( x ~ y, main= "x~y" )
x = 1:25;
y = x;
plot( y ~ x, pch=x);
x = 1:25;
y = x;
plot( y ~ x, pch=19);
x = 1:25;
y = x;
plot( y ~ x, pch=1:25);
x = 1:25;
y = x;
plot( y ~ x, pch=x);
x = 1:50;
y = x;
plot( y ~ x, pch=x);
x = 1:256;
y = x;
plot( y ~ x, pch=x);
x = 1:127;
y = x;
plot( y ~ x, pch=x);
x = 1:10;
y = x;
plot( y ~ x, pch=x);
#plot( y ~ x, main="first plot" );
#plot( x ~ y, main="second plot" )
#?plot
#exercise
# modify plot( y ~ x ) to line plot
# by adding type into the command
# ... ...
plot( y ~ x, main="line-point plot", type='b', pch=19 )
#this is another way of specifying an array
x = c( 0.1, 0.3, 1, 3, 5, 10, 0.001, 0.913 );
x
x[4:6]
x[2]
x[c(1,5,2)]
y = log(x);
plot( y ~ x, pch=19 );
plot( y ~ x, main="line-point plot", type='b', pch=19 )
x = c( 0.1, 0.3, 1, 3, 5, 10, 0.001, 0.913 );
x[4:6]
x[2]
x = x[2]
x = c(1, 3, 5, 7)
w = c(1, 3, 5, 7)
#plot( y ~ x, main="first plot" );
#plot( x ~ y, main="second plot" )
#?plot
#exercise
# modify plot( y ~ x ) to line plot
# by adding type into the command
# ... ...
plot( y ~ x, main="line-point plot", type='b', pch=19 )
#plot( y ~ x, main="first plot" );
#plot( x ~ y, main="second plot" )
#?plot
#exercise
# modify plot( y ~ x ) to line plot
# by adding type into the command
# ... ...
#plot( y ~ x, main="line-point plot", type='b', pch=19 )
#this is another way of specifying an array
x = c( 0.1, 0.3, 1, 3, 5, 10, 0.001, 0.913 );
w = c(1, 3, 5, 7)
x[4:6]
x[2]
x[c(1,5,2)]
y = log(x);
plot( y ~ x, pch=19 );
x[c(1,5,2)]
x[-1]
y = log(x);
plot( y ~ x, pch=19 );
mycolors = c("red", "green", "blue", "gold")
x = 1:4
y = x + 2
plot( y ~ x, col=mycolors, pch=19)
mycolors = c("red", "lightblue", "blue", "gold")
x = 1:4
y = x + 2
plot( y ~ x, col=mycolors, pch=19)
rm( list=ls()) #clean up worksapce
list.files()
tb = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
View(tb)
View(tb)
?str
str(tb);
tb[1:5, 2:3]
tb$age #what does mean?
tb[c(2,9), c(2,7)]
tb[c(2,9), c('age', 'SciLitScore')]
tb[c(9,2,15), c(7,2)]
tb[c(9,5), c(7,2)]
tb[c(5,9), c('age', 'SciLitScore')]
tb[c(9,5, 10, 1:3), c(7,2)]
round(rnorm(10)*10)
abs(round(rnorm(10)*10))
tb[abs(round(rnorm(10)*10)), c(7,2)]
tb[round(rnorm(10)*10), c(7,2)]
#indexing features of R
tb[1:5, 2:3]
tb$age #what does mean?
#tb$age[?] #try for 5th row in age
# what is the 5th and 9th rows in age and SciLitScore:
tb[c(5,9), c(7,2)]
summary(tb)
head(tb)
head(tb)
tb[2:5, c("age")]
table(tb$country)
table(tb$country)
boxplot( tb$metric ~ tb$gender, ylab="metric proficiency" )
table(tb$metric ~ tb$gender )
table(tb$metric, tb$gender )
t.test(tb$metric[tb$gender=='Female'], tb$metric[tb$gender=='Male'])
# Does this mean that females are more uncomfortable with metric usage?
t.test(tb$metric[tb$gender=='Female'], tb$metric[tb$gender=='Male'], alternative = 'less')
# Does this mean that females are more uncomfortable with metric usage?
t.test(tb$metric[tb$gender=='Female'], tb$metric[tb$gender=='Male'], alternative = 'greater')
# Does this mean that females are more uncomfortable with metric usage?
t.test(tb$metric[tb$gender=='Female'], tb$metric[tb$gender=='Male'], alternative = 'less')
# Does this mean that females are more uncomfortable with metric usage?
t.test(tb$metric[tb$gender=='Female'], tb$metric[tb$gender=='Male'], alternative = 'less')
# Does this mean that females are more uncomfortable with metric usage?
boxplot( tb$age ~ tb$gender, ylab='age')
# More female participants with Bachelor degrees
table( tb$gender, tb$degree )
boxplot( tb$metric ~ tb$degree, ylab='metric proficiency')
# how age in boxplot
boxplot( tb$metric ~ tb$age, ylab='metric proficiency')
summary( lm( tb$metric ~ tb$gender ) )
m1 = lm( tb$metric ~ tb$gender )
summary(m1)
m4 = lm( tb$metric~ tb$gender + tb$age + tb$degree )
summary(m4)
#remove rows with missing age from analysis. Missing age can cause bugs in anova model comparisons.
tb = tb[!is.na(tb$age), ]
pairs(tb[, c("metric", "SciLitScore", "SciAttitude")])
#########################
#summary(tb); str(tb)
#remove rows with missing age from analysis. Missing age can cause bugs in anova model comparisons.
tb = tb[!is.na(tb$age), ]
summary(tb)
str(tb);
pairs(tb[, c("metric", "SciLitScore", "SciAttitude")])
#########################
#summary(tb); str(tb)
#remove rows with missing age from analysis. Missing age can cause bugs in anova model comparisons.
tb = tb[!is.na(tb$age), ]
summary(tb)
str(tb);
pairs(tb[, c("age", "metric", "SciLitScore", "SciAttitude")])
pairs(tb[, c("age", "metric", "SciLitScore", "SciAttitude")])
summary(lm(tb$SciAttitude ~ tb$metric + tb$age + tb$gender + tb$country  )) #only metric is significant
