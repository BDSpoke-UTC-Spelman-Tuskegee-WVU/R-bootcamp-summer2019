table(tb2$earlyHuman)
tb2$earlyHuman = 0
tb2$earlyHuman[grep('TRUE', tb$earlyHuman)] = 0;
tb2$earlyHuman[grep('FALSE', tb$earlyHuman)] = 1;
table(tb$earlyHuman)
table(tb2$earlyHuman)
tb2$laser = 0
tb2$laser[grep('TRUE', tb$laser)] = 0;
tb2$laser[grep('FALSE', tb$laser)] = 1;
table(tb$laser)
table(tb2$laser)
tb2$continents = 0
tb2$continents[grep('TRUE', tb$continents)] = 1;
tb2$continents[grep('FALSE', tb$continents)] = 0;
table(tb$continents)
table(tb2$continents)
tb2$antibiotics = 0
tb2$antibiotics[grep('TRUE', tb$antibiotics)] = 0;
tb2$antibiotics[grep('FALSE', tb$antibiotics)] = 1;
table(tb$antibiotics)
table(tb2$antibiotics)
tb2$electronSize = 0
tb2$electronSize[grep('True', tb$electronSize)] = 1;
tb2$electronSize[grep('FALSE', tb$electronSize)] = 0;
table(tb$electronSize)
table(tb2$electronSize)
tb2$earthCenter = 0
tb2$earthCenter[grep('TRUE', tb$earthCenter)] = 1;
tb2$earthCenter[grep('FALSE', tb$earthCenter)] = 0;
table(tb$earthCenter)
table(tb2$earthCenter)
#sciLiteracy = c("light", "fossil", "food", "electronCharge",
#                "earlyHuman", "laser", "continents", "antibiotics", "electronSize", "earthCenter")
tb2$SciLitScore = apply( tb2[, sciLiteracy], MARGIN=1, FUN=sum ) #by row
hist(tb2$SciLitScore, br=20)
boxplot( tb2$metric ~ tb2$gender, ylab="metric proficiency" )
t.test(tb2$metric[tb2$gender=='Female'], tb2$metric[tb2$gender=='Male'])
#Does this mean that females are more uncomfortable with metric usage?
# Female participants tend to be younger
boxplot( tb2$age ~ tb2$gender, ylab='age')
# More female participants with Bachelor degrees
table( tb2$gender, tb2$degree )
boxplot( tb2$metric ~ tb2$degree, ylab='metric proficiency')
# Multiple regression
m1 = lm( tb2$metric ~ tb2$degree )
summary(m1)
m2 = lm( tb2$metric ~ tb2$age )
summary(m2)
m3 = lm( tb2$metric~ tb2$gender + tb2$degree + tb2$age )
summary(m3)
#########################
#summary(tb); str(tb)
#remove rows with missing age from analysis. Missing age can cause bugs in anova model comparisons.
tb2 = tb2[!is.na(tb2$age), ]
summary(tb2)
str(tb2);
pairs(tb2[, c("metric", "SciLitScore", "SciAttitude")])
summary(lm(tb2$SciLitScore ~ tb2$metric )) #significant
summary(lm(tb2$SciAttitude ~ tb2$metric )) #significant
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore )) #significant
summary(lm(tb2$SciAttitude ~ tb2$age )) #significant
summary(lm(tb2$metric ~ tb2$age )) #significant
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore + tb2$metric )) #significant
## metric -> SciAttitude and SciLitScore
summary(lm(tb2$SciAttitude ~ tb2$metric + tb2$age + tb2$gender + tb2$country  )) #only metric is significant
summary(lm(tb2$SciLitScore ~ tb2$metric + tb2$age + tb2$gender + tb2$country  )) #only metric is significant
summary(lm(tb2$SciLitScore ~ tb2$country)) #p=0.0009, but seems due to metric?
summary(lm(tb2$SciLitScore ~ tb2$metric + tb2$country  )) #only metric is significant
summary(lm(tb2$SciAttitude ~ tb2$country)) #p=0.0127, but seems due to metric?
summary(lm(tb2$SciAttitude ~ tb2$country + tb2$metric)) #country not significant when controled for metric
plot( tb2$SciLitScore ~ jitter(tb2$metric), xlab='Metric Proficiency', ylab='Scientific Literacy', ylim=c(2,10) )
m1 = lm(tb2$SciLitScore ~ tb2$metric )
abline(m1, col='red')
summary(m1)
text(2, 2.5, "SciLit ~ Metric, R2=0.26, p<0.001", col="red", pos=4)
#abline(m2, col='blue')
summary(m2)
m2 = lm(tb2$SciLitScore ~ tb2$metric + tb2$age)
anova(m1, m2)
m3 = lm(tb2$SciLitScore ~ tb2$metric + tb2$age + tb2$gender)
summary(m3)
anova(m2,m3)
m4 = lm(tb2$SciLitScore ~ tb2$metric + tb2$age + tb2$country)
anova(m2, m4)
#text(2, 2, "SciLit ~ Metric + Age, R2=0.29, p=2.8E-14", col="blue", pos=4)
plot( tb2$SciAttitude ~ jitter(tb2$metric), ylim=c(0.5,4), xlab='Metric Proficiency', ylab='Attitude toward Science' )
m1 = lm( tb2$SciAttitude ~ tb2$metric )
m2 = lm( tb2$SciAttitude ~ tb2$metric + tb2$age )
abline(m1, col='red')
abline(m2, col='blue')
summary(m1)
summary(m2)
anova(m1, m2)
text(2, 0.9, "SciAttitude ~ Metric , R2=0.18, p=1.0E-9", col="red", pos=4)
text(2, 0.7, "SciAttitude ~ Metric + Age, R2=0.24, p=4.7E-12", col="blue", pos=4)
plot( tb2$SciAttitude ~ jitter(tb2$age), ylab='Attitude toward Science', xlab='Age')
m2 = lm( tb2$SciAttitude ~ tb2$age + tb2$metric)
abline(m2, col='blue')
text(30, 1.7, "SciAttitude ~ Metric + Age, R2=0.24, p=4.7E-12", col="blue", pos=4)
summary(lm(tb2$SciAttitude ~ tb2$metric + tb2$age + tb2$gender + tb2$country  )) #age is signicant!!!
#but this might be a bias in the sample
# 1) there is many faculty
# 2) people took the sample may be interested in the metric and science at the first place?!
summary(lm(tb2$SciAttitude ~ tb2$metric + tb2$age + tb2$gender + tb2$country + tb2$degree  )) #age is signicant!!!
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore))
summary(lm(tb2$SciAttitude ~ tb2$SciLitScore + tb2$metric))
boxplot( tb2$SciAttitude ~ tb2$country )
boxplot( tb2$SciLitScore ~ tb2$country )
boxplot( tb2$metric ~ tb2$country )
boxplot( tb2$SciLitScore ~ tb2$age )
boxplot( tb2$SciAttitude ~ tb2$age )
boxplot( tb2$metric ~ tb2$age )
###########
# remove phD from the samples
#
summary(tb2[, 1:5])
tb3 = tb2[ - grep('Ph.D.', tb2$degree)  , ]
summary(tb3)
summary(lm(tb3$SciAttitude ~ tb3$metric + tb3$age + tb3$gender + tb3$country + tb3$degree  ))
#age is still signicant after PhD are removed from the sample
testTwoFactorTb2 = function( fac1, fac2) {
tbTwo = table( tb2[,fac1], tb2[,fac2] )
print(tbTwo)
f = fisher.test(tbTwo)
#f = chisq.test(tbTwo)
}
#metrics = c("shaq", "kilo", "mm", "inseam", "weather")
#sciLiteracy = c("light", "fossil", "food", "electronCharge",
#                "earlyHuman", "laser", "continents", "antibiotics", "electronSize", "earthCenter")
#sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
f = testTwoFactorTb2( "shaq", "religiousView"); f
f = testTwoFactorTb2( "shaq", "dailyLife"); f
f = testTwoFactorTb2( "shaq", "SciOnLife"); f
#f = testTwoFactorTb2( "shaq", "SciEffect"); f #significant effect!!!!
#f = testTwoFactorTb2( "kilo", "SciEffect"); f #significant effect!!!
#f = testTwoFactorTb2( "mm", "SciEffect"); f #significant effect!!!
#f = testTwoFactorTb2( "inseam", "SciEffect"); f #significant effect!!!
#f = testTwoFactorTb2( "weather", "SciEffect"); f #p=0.078
#f = testTwoFactorTb2( "country", "SciEffect"); f #p=0.24
summary(lm(tb2$SciEffect ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #significant kilo
summary(lm(tb2$SciOnLife ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #no effect
summary(lm(tb2$religiousView ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #age effect
summary(lm(tb2$dailyLife ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #gender
summary(lm(tb2$religiousView ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #significant age, gender
summary(lm(tb2$SciOnLife ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #no effect
summary(lm(tb2$dailyLife ~ tb2$kilo + tb2$country + tb2$gender + tb2$age + tb2$degree )) #gender effect, education
summary(lm(tb2$SciEffect ~ tb2$mm + tb2$country + tb2$gender + tb2$age + tb2$degree )) #no effect
summary(lm(tb2$SciEffect ~ tb2$inseam + tb2$country + tb2$gender + tb2$age + tb2$degree )) #random
summary(lm(tb2$SciEffect ~ tb2$shaq + tb2$country + tb2$gender + tb2$age + tb2$degree )) #p=0.066 shaq
summary(lm(tb2$SciEffect ~ tb2$weather + tb2$country + tb2$gender + tb2$age + tb2$degree )) #no effect
f = testTwoFactorTb2("country", "shaq")
f
f = testTwoFactorTb2( "country", "shaq")
f
table(tb2$gender)
table(tb$gender)
tb2$shaq = 0
tb2$shaq[ tb$shaq=='Yes' ] = 1
tb2$shaq = 0
tb2$shaq[ tb$shaq=='Yes' ] = 1
list.files()
# colClass specify that all columns will be treated as characters for now.
tb.ori = read.csv("metric_survey_data.csv", colClass=rep("character", 24))
?str
str(tb.ori);
tb.ori$Timestamp
tb = tb.ori  #make a copy because we will modify the table.
names(tb.ori)
?names
#rename the columns with shortter names for convenience
names(tb) = c("time","gender", "age", "degree", "country", "light", "shaq", "fossil", "kilo", "mm",
"food","inseam", "weather","electronCharge","earlyHuman",
"laser", "continents", "antibiotics", "electronSize","earthCenter",
"religiousView","dailyLife","SciOnLife", "SciEffect")
str(tb)
cbind (names(tb), substr(names(tb.ori), 1, 20))
?cbind
#indexing features of R
tb[1:5, 2:3]
tb$age #what does mean?
#tb$age[?] #try for 5th row in age
#correct some input errors
# If there is no input of 'age'
tb$age[is.na(tb$age)] = 'Do not wish to answer'
table(tb$age)
?table
# If there is no input of 'age'
tb$degree [is.na(tb$degree)] = 'Do not wish to answer'
table(tb$degree)
tb$gender[tb$gender=='']='Do not wish to answer'
table(tb$gender)
# dealing with missing values, add 'NA' to empty answers
# nested for-loops
for( i in 1:length(tb[, 1])) {  #outter for-loop, i for row, from 1 to the last row
for( j in 5:length(tb[1, ])) {  #inner for-loop, j for column, from 5th to the last column
# print( paste("i=", i, "j=", j) )
}
}
#if there is empty cell, we assign a missing value 'NA' there
for( i in 1:length(tb[, 1])) {  #outter for-loop
for( j in 5:length(tb[1, ])) {  #inner for-loop
if ( is.na(tb[i, j]) ) {
# do nothing
} else if (tb[i,j]=='') {
tb[i,j] = NA
}
}
}
##### create a second table, convert character values to numerical values
tb2 = tb[ ,c(2,4,5)]  #this is the score table, empty space before comma indicate every row
head(tb2)
#calculate the average age for each category
?grep #This is not GRE prep. This is pattern match.
# grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,
#     fixed = FALSE, useBytes = FALSE, invert = FALSE)
tb2$age = NA
tb2$age[grep("18-22", tb$age)] = 18/2 + 22/2
tb2$age[grep("23-30", tb$age)] = 23/2 + 30/2
tb2$age[grep("31-40", tb$age)] = 31/2 + 40/2
tb2$age[grep("41-50", tb$age)] = 41/2 + 50/2
tb2$age[grep("51-55", tb$age)] = 51/2 + 55/2
tb2$age[grep("56-60", tb$age)] = 56/2 + 60/2
#> grep("56-60", tb$age)
# [1]   6  12  84  88 104 112 129 130 131 132 133 156 162 163 185 216 219
tb2$age[grep("More than 60 years", tb$age)] = 65
table(tb$age) #table is a very useful function (command) for tabulation
table(tb2$age)
summary(tb2$age)
#Visualize the data
table(tb2$age, tb2$gender)
boxplot( tb2$age ~ tb2$gender)
#histogram of age
hist(tb2$age)
###country
table( tb$country )  #All the inputed 'countries'
tb2$country = 0  #for non-USA countries
tb2$country[tb$country=='United States'] = 1
table( tb2$country )
#have a look at some entries
head(tb2)
#double-check the columns
names(tb2)
### Here are the columns for the 3 categories
metrics = c("shaq", "kilo", "mm", "inseam", "weather")
sciLiteracy = c("light", "fossil", "food", "electronCharge",
"earlyHuman", "laser", "continents", "antibiotics",
"electronSize", "earthCenter")
sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
tb2$shaq = 0
tb2$shaq[ tb$shaq=='Yes' ] = 1
tb2$shaq[ tb$shaq=='No' ] = 0
table(tb2$shaq)
tb2$kilo = 0
tb2$kilo[ tb$kilo=='1000 x' ] = 1
table(tb2$kilo)
tb2$mm=0
tb2$mm[ tb$mm==0.145 ] = 1
table(tb2$mm)
table(tb$mm)
tb2$inseam = 0
tb2$inseam[tb$inseam=="This person is short"] = 1
tb2$inseam[tb$inseam=="This person is tall"] = 0
table(tb2$inseam)
tb2$weather = 0
tb2$weather[tb$weather=="A Short sleeve shirt"] = 1
#tb2$weather[tb$weather=="A winter coat"] = 0
#tb2$weather[tb$weather=="A light jacket"] = 0
table(tb$weather)
table(tb2$weather)
######### summarize the metric proficiency score
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
#metric total score
tb2$metric = apply( tb2[, metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=4)
tb2$metric[tb2$gender=='Female']
tb = read.csv("4cities.csv", row.names=1);
list.files()
tb.ori = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
tb.ori = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
rm( list=ls()) #clean up worksapce
list.files()
tb.ori = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
?str
help(str)
str(tb.ori);
rm( list=ls()) #clean up worksapce
list.files()
tb = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
?str
help(str)
str(tb);
#indexing features of R
tb[1:5, 2:3]
tb$age #what does mean?
#tb$age[?] #try for 5th row in age
#correct some input errors
# If there is no input of 'age'
tb$age[is.na(tb$age)] = 'Do not wish to answer'
table(tb$age)
?table
# If there is no input of 'age'
tb$degree [is.na(tb$degree)] = 'Do not wish to answer'
table(tb$degree)
tb$gender[tb$gender=='']='Do not wish to answer'
table(tb$gender)
#correct some input errors
# If there is no input of 'age'
tb$age[is.na(tb$age)] = 'Do not wish to answer'
table(tb$age)
?table
# If there is no input of 'age'
tb$degree [is.na(tb$degree)] = 'Do not wish to answer'
table(tb$degree)
tb$gender[tb$gender=='']='Do not wish to answer'
table(tb$gender)
summary(tb)
head(tb)
for ( i in 1:3) print(i);
install.packages(c("ape", "seqinr"))
#### a function calls another function
even_total = function( x ) {
x = take_even(x);
sum(x);
}
x = c( 1,2,3,4 );
u = even_total( x );
for ( i in 1:3) print(i);
for ( i in c(0.5, 1, -2, 5) ) print(i);
i=2;
while( i<=10 ) {
print(i);
i = i + 2;
}
x = 1.5;
#if ((x<1) & (x>0)) {
if ((x<0) | (x>1)) {
print("X is not between 0 and 1");
} else {
print("X is between 0 and 1 ");
}
x =0.5;
if ( ( ! x>1) & ( ! x<0 ) ) {
print("x is between 0 and 1");
}
if ( x == 0.5 ) {
print("50%");
}
x= -1;
if ( ! x<0 ) {
print("non-negative");
} else {
print("negative");
}
y = ifelse( x<0, -x, x );
# assign abosulte value of x to y
#### a function
x = c( 1,2,3,4); #this is a global variable
#x = c(5, 4, 3, 6, 10, 12)
take_even = function( x ) {
y = c(); # a locale copy inside of loop
for( i in 1:length(x)) {
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
}
y; #the last line, return y to the main program
}
y = take_even(x); # c(2,4)
z = take_even(x); # c(2,4);
w = take_even(1:10); #c (2,4,6,8,10)
u = -5:10;
v = take_even(u); # -4 -2  0  2  4  6  8 10
take_even(c(5,4,10,11, 100, -3, 9, 0, 3333, 5524234234))
#### a function calls another function
even_total = function( x ) {
x = take_even(x);
sum(x);
}
x = c( 1,2,3,4 );
u = even_total( x );
print(u)
# x will be changed if the following line is run.
x = take_even(x)
#### a function calls another function
even_total = function( x ) {
x = take_even(x);
sum(x);
}
x = c( 1,2,3,4, 0, -2, -4 );
u = even_total( x );
print(u)
# x will be changed if the following line is run.
x = take_even(x)
#### scope of variable
x = c( 1,2,3,4); #this is a global variable
y = c(-1, -2, -3, -4)# this is also a global one
y.outside = y;
take_uphalf = function( x ) {
y = c(); # a local copy inside of loop
xbar = mean(x);
for( i in 1:length(x)) {
if ( x[i] > xbar ) {
y = c(y, x[i] );
}
}
y.inside = y;
y; #the last line, return y to the main program
}
w = take_uphalf(x);
rm(list=ls()) #clearn my workspace
tb = read.csv("Carlson_Yeast.csv");
rm(list=ls()) #clearn my workspace
tb = read.csv("Carlson_Yeast.csv");
View(tb)
plot( tb$Amount ~ tb$Hours );
plot( Amount ~ Hours, data=tb );
plot( Amount ~ Hours, data=tb, type="b",
main="Carlson growth curve" );
##### the second data set, multiple plots
tb2 = read.csv( "Carlson2.csv" );
##first try, not pretty
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
View(tb2)
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red" );
##add legends
legend(2,500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1) )
##### plot sunflower seed data
sunflower = read.csv("SunflowerSeedData.csv");
plot( sunflower$Stripes ~ sunflower$Seeds, ylab="Stripes"
, xlab="Seeds", main="sunflower data", type="l"
, col="red"
)
x= seq(1:30)
y= x^2;
write.csv(x, "x.csv", row.names=F)
write.csv(y, "y.csv", row.names=F)
output = cbind(x, y)
write.csv(output, "xy.csv", row.names=F)
plot( y ~ x, pch=x )
plot( 1:20 ~ 1:20, pch=1:20)
x = 1:30
y = 1:30
plot( y ~x, pch=x)
x= seq(1:30)
y= x^2;
write.csv(x, "x.csv", row.names=F)
write.csv(y, "y.csv", row.names=F)
output = cbind(x, y)
write.csv(output, "xy-20190530.csv", row.names=F)
plot( y ~ x, pch=x )
?write.csv()
list.files()
# colClass specify that all columns will be treated as characters for now.
tb.ori = read.csv("metric_survey_data.csv", colClass=rep("character", 24))
?str
str(tb.ori);
tb.ori$Timestamp
tb = tb.ori  #make a copy because we will modify the table.
names(tb.ori)
?names
#rename the columns with shortter names for convenience
names(tb) = c("time","gender", "age", "degree", "country", "light", "shaq", "fossil", "kilo", "mm",
"food","inseam", "weather","electronCharge","earlyHuman",
"laser", "continents", "antibiotics", "electronSize","earthCenter",
"religiousView","dailyLife","SciOnLife", "SciEffect")
str(tb)
cbind (names(tb), substr(names(tb.ori), 1, 20))
?cbind
cbind (names(tb), substr(names(tb.ori), 1, 30))
?cbind
View(tb.ori)
?apply(array, margin, ...)
View(sunflower)
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
rm(list=ls())
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
View(Kdata)
View(fitness)
View(pairs)
str(pairs)
#make sure gene names are treated as letters, not fake numbers (factors)
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# How do we know that ORF1 and 2 are now letters?
# ... ...
Kdata$orfname = as.character(Kdata$orfname)
View(pairs)
ids = c(pairs$ORF1, pairs$ORF2); #merged two columns into one
degree = table( ids );  #tabulate the occurence of each element
# quality check
sum(degree); #check the counting result, the length of ids
length(ids)
View(fitness)
View(Kdata)
View(fitness)
