heatmap.2(as.matrix(-1*Zmat),scale="none", Rowv=NA, Colv =NA, legend=1, do.dendro=c(F,F), col=RGBColVec(64));
library(gplots)
#colors = c(seq(min(Zmat),-10.1,length=100),seq(-9.9,9.9,length=100),seq(10.1,max(Zmat),length=100))
my_palette <- colorRampPalette(c("blue2", "white", "red2"))(n = 299)
heatmap.2( as.matrix(Zmat), col=my_palette, scale="none", trace='none',
# margins = c(5,4), key.title = NA,
dendrogram = "none", Rowv = FALSE, Colv = FALSE
,key.xlab="Z-score", key.ylab=NA,
)
#par(mar=c(0,0,0,0))
#heatmap.2(as.matrix(-1*Zmat),scale="none", Rowv=NA, Colv =NA, legend=1, do.dendro=c(F,F), col=RGBColVec(64));
library(gplots)
#colors = c(seq(min(Zmat),-10.1,length=100),seq(-9.9,9.9,length=100),seq(10.1,max(Zmat),length=100))
my_palette <- colorRampPalette(c("blue2", "white", "red2"))(n = 299)
heatmap.2( as.matrix(Zmat), col=my_palette, scale="none", trace='none',
# margins = c(5,4), key.title = NA,
#dendrogram = "no",
Rowv = FALSE, Colv = FALSE
,key.xlab="Z-score", key.ylab=NA,
)
#par(mar=c(0,0,0,0))
#heatmap.2(as.matrix(-1*Zmat),scale="none", Rowv=NA, Colv =NA, legend=1, do.dendro=c(F,F), col=RGBColVec(64));
library(gplots)
#colors = c(seq(min(Zmat),-10.1,length=100),seq(-9.9,9.9,length=100),seq(10.1,max(Zmat),length=100))
my_palette <- colorRampPalette(c("blue2", "white", "red2"))(n = 299)
heatmap.2( as.matrix(Zmat), col=my_palette, scale="none", trace='none',
# margins = c(5,4), key.title = NA,
#dendrogram = "no",
#Rowv = FALSE,
#Colv = FALSE
,key.xlab="Z-score", key.ylab=NA,
)
#par(mar=c(0,0,0,0))
#heatmap.2(as.matrix(-1*Zmat),scale="none", Rowv=NA, Colv =NA, legend=1, do.dendro=c(F,F), col=RGBColVec(64));
rm(list=ls())
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
View(Kdata)
pairs = read.csv("pairs.csv");
View(pairs)
rm(list=ls())
#evolutionary rates
Kdata = read.csv( "Sce.Spa.KaKs.csv");
# protein interaction network (PIN) in gene
pairs = read.csv("pairs.csv");
# this is the growth fitness data
fitness = read.csv("growth.fitness.hom.csv");
fitness$orf = as.character( fitness$orf );
View(fitness)
View(pairs)
#make sure gene names are treated as letters, not fake numbers (factors)
pairs$ORF1 = as.character( pairs$ORF1 );
pairs$ORF2 = as.character( pairs$ORF2 );
# How do we know that ORF1 and 2 are now letters?
# ... ...
Kdata$orfname = as.character(Kdata$orfname)
View(pairs)
ids = c(pairs$ORF1, pairs$ORF2); #merged two columns into one
degree = table( ids );  #tabulate the occurence of each element
# quality check
sum(degree); #check the counting result, the length of ids
length(ids)
hist(degree)
hist(degree, br=20)
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
#ids are orfs in net
str(net)
str(Kdata)
View(net)
View(Kdata)
x = c("red", 'green', 'sky', 'shoe', 'orange', 'purple',
'pink', 'dog', 'penguin', 'apple');
y = c('purple', "spelmanblue", 'dog',  'ocean', 'shoe', 'orange',
'pink', 'pear', 'shoe'  );
match( x, y )
x = c("red", 'green', 'sky', 'shoe', 'orange', 'purple',
'pink', 'dog', 'penguin', 'apple');
y = c('purple', "spelmanblue", 'dog',  'ocean', 'shoe', 'orange',
'pink', 'pear', 'shoe'  );
y[match( x, y )]
ids = c(pairs$ORF1, pairs$ORF2); #merged two columns into one
degree = table( ids );  #tabulate the occurence of each element
# quality check
sum(degree); #check the counting result, the length of ids
length(ids)
x = c("red", 'green', 'sky', 'shoe', 'orange', 'purple',
'pink', 'dog', 'penguin', 'apple');
y = c('purple', "spelmanblue", 'dog',  'ocean', 'shoe', 'orange',
'pink', 'pear', 'shoe'  );
match( x, y )
match( y, x )
x[match( y, x )]
y[match( y, x )]
x = c("red", 'green', 'sky', 'shoe', 'orange', 'purple',
'pink', 'dog', 'penguin', 'apple');
y = c('purple', "spelmanblue", 'dog',  'ocean', 'shoe', 'orange',
'pink', 'pear', 'shoe'  );
match(x,y)
y[match(x,y)]
#y[match(x,y)]
rbin(match(x,y), y[match(x,y)] )
#y[match(x,y)]
rbind(match(x,y), y[match(x,y)] )
#y[match(x,y)]
rbind(match(x,y), y[match(x,y)] )
rbind( y, 1:length(y))
rbind( y, 1:length(y))
#y[match(x,y)]
rbind(match(x,y), y[match(x,y)] )
accuracy = 0.99
lines  = 1000
errorchance = (1-accuracy)^lines
accuracy = 0.99
lines  = 1000
errorchance = (1-accuracy)^lines
accuracy = 0.99
lines  = 1000
errorchance = (1-accuracy)^lines
print(errorchance)
error = 0.01
lines  = 1000
pefect = (1-error)^lines
print(perfect)
error = 0.01
lines  = 1000
perfect = (1-error)^lines
print(perfect)
1=pefect
error = 0.01
lines  = 1000
perfect = (1-error)^lines
print(perfect)
1=perfect
1 = perfect
1 = perfect
1 - perfect
#now, put degree into a spreadsheet
net = data.frame(degree);
str(net);
net$ids = as.character( net$ids); #make sure gene names are "characters"
#ids are orfs in net
# By now, we have interaction degree in 'net' and
# evolutionary rates in 'data'.
# We need to merge the two dataframes (spreadsheets)
# based on ORFs (like SSNs for genes)
str(net)
str(Kdata)
#check network gene names match to gene names in the evolutionary data
####  intersect( net$ids, Kdata$orfname);
# we 2676 matching ORF
# try to do linear regression between evolutionary rate
# and number of interactions
###  lm( Kdata$Ka ~ net$Freq) #won't work
#the above command does not work, beceause the data are in two spreadsheets
# and they are not matched.
#### Now, do informatics work to merge the dataset
#The evolutionary rate and degree are in separate spreadsheet.
# We need to put them together by 'match'' data and net
# This match 'net$Freq' into 'data'
Kdata$degree = net$Freq[match(Kdata$orfname, net$ids )]
orfnamePositionsInNet = match(Kdata$orfname, net$ids )
#let try to match 'Kdata$Ka' into 'net'
#basically flip the previous matching procedure
# ... ...
#You can also check the matches in a different way
positions =  Kdata$orfname %in% net$ids ;  # many true or false,
#Now try to put Omega into 'net'
# ... ...
#Now try to put Ks into 'net'
# ... ...
#visual examination to prevent errors
head(Kdata)
net[net$ids=='YAL010C', ]
net[net$ids=='YAL012W', ]
###Now the real work
# Figure 1
# find out correlation bw degree and Omega, Ka, Ks
m = lm(Kdata$Ka ~ Kdata$degree);
summary(m)
plot( Kdata$Ka ~ Kdata$degree, xlab='interactions per protein', ylab='evolutionary rate'); #this is figure 1
#this looks like a non-linear negative correlation
abline(m, col="red" );
### Using Omega is principly more correct than Ka
### lm between omega and degree
###
m2 = lm(Kdata$Omega ~ Kdata$degree )
summary(m2)
plot( Kdata$Omega ~ Kdata$degree, main="Omega ~ degree" )
abline( m2, col="red")
View(net)
### Now We will work on Figure 2.
# transfer fitness data on YPD into Kdata
Kdata$YPD = fitness$YPD[match(Kdata$orfname, fitness$orf)]
#visual check two entries
fitness[fitness$orf=='YAL007C',]
# Now, for figure 2
summary(lm(Kdata$Ka ~ Kdata$YPD)) #evolutionary rate = ka ypd= growth in rich media)
# allows us to compare overall fitness
summary(lm(Kdata$degree ~ Kdata$YPD))
summary(lm( log(Kdata$degree) ~ Kdata$YPD))#normalization
summary(lm(Kdata$Ka ~ Kdata$degree)) #evolutionary rate compared to frequency of interactions
summary(lm(Kdata$Ka ~ Kdata$YPD + Kdata$degree ))
# try to see conditional correlation between degree ~ omega
#  ... ...
# summary(lm(Kdata$Omega ~ ????  ))
#
summary(lm(Kdata$degree ~ Kdata$YPD + Kdata$Ka ))
rm(list=ls())
debug = 1
library(gplots)
install.packages("gplots")
rm(list=ls())
debug = 1
library(gplots)
library(igraph)
state_pairs= read.csv("48states.csv")
states = read.csv("state_year.csv")
newpairs = data.frame( t(apply(state_pairs, 1, sort)) ); #oder id1 and id2
cbind( newpairs, state_pairs)[1:10,]
state_pairs = newpairs
state_pairs$state1A = states$abbr[match( state_pairs$state1, states$state)]
state_pairs$state2A = states$abbr[match( state_pairs$state2, states$state)]
g = graph.data.frame(state_pairs[, 3:4], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
plot(g, vertex.color = "green")
summary(states$year)
table(states$year)
hist(states$year, br=20)
cutoff = c(1788, 1830, 1888)
cutoff[3]
year2bin = function( inYear ){
bin = 0;
if ( inYear <= cutoff[1]) {    bin = 1;  }
else if (inYear <= cutoff[2] ) {    bin = 2;  }
else if (inYear <= cutoff[3])  {    bin = 3;  }
else {  bin = 4;  }
return(bin)
}
year2bin(1730)
year2bin(1790)
year2bin(1850)
year2bin(1980)
unlist(lapply(states[, c("year")],  year2bin))
states$bin = unlist(lapply(states[, c("year")],  year2bin))
state_pairs$state1bin = states$bin[match( state_pairs$state1, states$state)]
state_pairs$state2bin = states$bin[match( state_pairs$state2, states$state)]
tags = t(apply(state_pairs[,c("state1bin", "state2bin")], 1, sort))
state_pairs$tag = paste( tags[,1], tags[,2], sep='_')
F.obs = data.frame( table(state_pairs$tag))
names(F.obs) = c("tag", "freq")
F.obs
ms02files = list.files(path='48statesMS02')
F.ms02 = data.frame(matrix(data=NA, nrow=1, ncol=3)) #buffer
names(F.ms02) = c('tag', 'freq', 'file')
#file = "_ms02_48states.46.csv"
for (file in ms02files ){
if ( debug > 0 ) { print(file) }
ms02_pairs= read.csv(paste("48statesMS02/", file, sep=''))
ms02_pairs = ms02_pairs[,1:2]
ms02_pairs$state1bin = states$bin[match( ms02_pairs$id1, states$state)]
ms02_pairs$state2bin = states$bin[match( ms02_pairs$id2, states$state)]
tags2 = t(apply(ms02_pairs[,c("state1bin", "state2bin")], 1, sort))
ms02_pairs$tag = paste( tags2[,1], tags2[,2], sep='_')
F.ms02current = data.frame( table(ms02_pairs$tag)) #Current buffer
F.ms02current$file = file
names(F.ms02current) = c('tag', 'freq', 'file')
F.ms02 =  data.frame( rbind(F.ms02, data.frame(F.ms02current)) )
}
F.ms02 = F.ms02[ !is.na(F.ms02$tag), ]
unique_tags = unique( c(as.character(F.obs$tag), as.character(F.ms02$tag)))
Zs = data.frame(unique_tags)
names(Zs) = c('tag')
Zs$freq = F.obs$freq[ match( Zs$tag , F.obs$tag) ]
Zs$freq[is.na(Zs$freq)] = 0;
for (i in 1 : length(Zs$tag)) {
#i = 2
sub = F.ms02[ F.ms02$tag == Zs$tag[i], ]
if(debug>0 ){
print( paste( Zs$tag[i], "mean:", mean(sub$freq), "sd:", sd(sub$freq) ))
}
Zs$Z[i] = ( Zs$freq[i] - mean(sub$freq) )/ max( sd(sub$freq), 0.5)
}
tmp = as.vector(unlist(strsplit(as.character(Zs$tag), split="_")))
tmp2 = data.frame( matrix( tmp, nrow=10, ncol=2, byrow = T) )
names(tmp2) = c('c1', 'c2')
Zs = cbind( Zs, tmp2)
#unique categories
cats = sort( unique( c(as.character(Zs$c1), as.character(Zs$c2))))
Zmat = data.frame(matrix(NA, ncol=length(cats), nrow=length(cats)))
names(Zmat) = cats;
rownames(Zmat) = cats;
for (i in 1:length(cats)){#row
for (  j in 1:length(cats)) { #column
tmp = sort(c(i, j))
mytag = paste(tmp[1], tmp[2], sep="_")
print (mytag)
Zmat[i,j] = Zs$Z[ Zs$tag == mytag ]
}
}
library(gplots)
#colors = c(seq(min(Zmat),-10.1,length=100),seq(-9.9,9.9,length=100),seq(10.1,max(Zmat),length=100))
my_palette <- colorRampPalette(c("blue2", "white", "red2"))(n = 299)
heatmap.2( as.matrix(Zmat), col=my_palette, scale="none", trace='none',
# margins = c(5,4), key.title = NA,
#dendrogram = "no",
#Rowv = FALSE,
#Colv = FALSE
,key.xlab="Z-score", key.ylab=NA,
)
#par(mar=c(0,0,0,0))
#heatmap.2(as.matrix(-1*Zmat),scale="none", Rowv=NA, Colv =NA, legend=1, do.dendro=c(F,F), col=RGBColVec(64));
#heatmap_2(Zmat, legend=1, legfrac=10)
rm(list=ls())
debug = 0
library(igraph)
pairs= read.csv("Data/yeast.pin.csv", colClasses = c("character", "character"))
g = graph.data.frame(pairs[, 1:2], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
pairs$cat1 = g.degree[pairs$geneA]
pairs$cat2 = g.degree[pairs$geneB]
g.degree["YAL002W"] #visual check passed
tags = t(apply(pairs[,c("cat1", "cat2")], 1, sort))
pairs$tag = paste( tags[,1], tags[,2], sep='_')
F.obs = data.frame( table(pairs$tag))
names(F.obs) = c("tag", "freq")
F.obs [1:10,]
ms02files = list.files(path='yeastMS02')
if (debug ) {ms02files = ms02files[1:5] }
F.ms02 = data.frame(matrix(data=NA, nrow=1, ncol=3)) #null distributions
names(F.ms02) = c('tag', 'freq', 'file')
# file = "ms02.1.csv" #debug
for (file in ms02files ){
if ( debug > 0 ) { print(file) }
ms02_pairs= read.csv(paste("yeastMS02/", file, sep=''),
colClasses = c("character", "character"))
ms02_pairs = ms02_pairs[,1:2]
ms02_pairs$cat1 = g.degree[ms02_pairs$id1]
ms02_pairs$cat2 = g.degree[ms02_pairs$id2]
g.degree["YOR316C-A"] #visual check passed
g.degree["YGR007W"] #visual check passed
g.degree["YCR018C"] #visual check passed
tags2 = t(apply(ms02_pairs[,c("cat1", "cat2")], 1, sort))
ms02_pairs$tag = paste( tags2[,1], tags2[,2], sep='_')
F.ms02current = data.frame( table(ms02_pairs$tag))
F.ms02current$file = file
names(F.ms02current) = c('tag', 'freq', 'file')
F.ms02 =  data.frame( rbind(F.ms02, data.frame(F.ms02current)) )
}
F.ms02 = F.ms02[ !is.na(F.ms02$tag), ]
unique_tags = unique( c(as.character(F.obs$tag), as.character(F.ms02$tag)))
Zs = data.frame(unique_tags)
names(Zs) = c('tag')
Zs$freq = F.obs$freq[ match( Zs$tag , F.obs$tag) ]
Zs$freq[is.na(Zs$freq)] = 0;
Zs[1:20,]
for (i in 1 : length(Zs$tag)) {
#i = 2
sub = F.ms02[ F.ms02$tag == Zs$tag[i], ]
if(debug>1 ){
print( paste( Zs$tag[i], "mean:", mean(sub$freq), "sd:", sd(sub$freq) ))
}
Zs$Z[i] = ( Zs$freq[i] - mean(sub$freq) ) / max(sd(sub$freq), 0.5)
}
rm(list=ls())
library(igraph)
state_pairs= read.csv("48states.csv")
states = read.csv("state_year.csv")
state_pairs$state1A = states$abbr[match( state_pairs$state1, states$state)]
state_pairs$state2A = states$abbr[match( state_pairs$state2, states$state)]
g = graph.data.frame(state_pairs[, 3:4], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
plot(g)
g.shortestpath.m = shortest.paths(g)
str(g.shortestpath.m)
sorted.names = sort( rownames(g.shortestpath.m) )
gsm = g.shortestpath.m[, sorted.names]
gsm = gsm[sorted.names, ]
summary(states$year)
table(states$year)
hist(states$year, br=20)
cutoff = c(1788, 1830, 1888)
cutoff[3]
year2bin = function( inYear ){
bin = 0;
if ( inYear <= cutoff[1]) {    bin = 1;  }
else if (inYear <= cutoff[2] ) {    bin = 2;  }
else if (inYear <= cutoff[3])  {    bin = 3;  }
else {  bin = 4;  }
return(bin)
}
year2bin(1730)
year2bin(1790)
year2bin(1850)
year2bin(1980)
unlist(lapply(states[, c("year")],  year2bin))
states$bin = unlist(lapply(states[, c("year")],  year2bin))
state_pairs$state1bin = states$bin[match( state_pairs$state1, states$state)]
state_pairs$state2bin = states$bin[match( state_pairs$state2, states$state)]
g2 = graph.data.frame(state_pairs[, c("state1bin","state2bin")], directed=F)
plot(g2)
ms02_pairs= read.csv("48statesMS02/_ms02_48states.1.csv")
ms02_pairs = ms02_pairs[,1:2]
ms02_pairs$id1A = states$abbr[match( ms02_pairs$id1, states$state)]
ms02_pairs$id2A = states$abbr[match( ms02_pairs$id2, states$state)]
ms02_pairs$state1bin = states$bin[match( ms02_pairs$id1, states$state)]
ms02_pairs$state2bin = states$bin[match( ms02_pairs$id2, states$state)]
g.ms02 = graph.data.frame(ms02_pairs[, 3:4], directed=F)
plot(g.ms02)
g2.ms02 = graph.data.frame(ms02_pairs[, c("state1bin","state2bin")], directed=F)
plot(g2.ms02)
rm(list=ls())
library(igraph)
state_pairs= read.csv("48states.csv")
states = read.csv("state_year.csv")
View(state_pairs)
View(states)
state_pairs$state1A = states$abbr[match( state_pairs$state1, states$state)]
state_pairs$state2A = states$abbr[match( state_pairs$state2, states$state)]
View(state_pairs)
g = graph.data.frame(state_pairs[, 3:4], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
plot(g)
plot(g)
plot(g)
plot(g)
plot(g)
plot(g)
g.shortestpath.m = shortest.paths(g)
str(g.shortestpath.m)
sorted.names = sort( rownames(g.shortestpath.m) )
gsm = g.shortestpath.m[, sorted.names]
gsm = gsm[sorted.names, ]
View(gsm)
summary(states$year)
table(states$year)
year2bin = function( inYear ){
bin = 0;
if ( inYear <= cutoff[1]) {    bin = 1;  }
else if (inYear <= cutoff[2] ) {    bin = 2;  }
else if (inYear <= cutoff[3])  {    bin = 3;  }
else {  bin = 4;  }
return(bin)
}
unlist(lapply(states[, c("year")],  year2bin))
rm(list=ls())
library(igraph)
state_pairs= read.csv("48states.csv")
states = read.csv("state_year.csv")
state_pairs$state1A = states$abbr[match( state_pairs$state1, states$state)]
state_pairs$state2A = states$abbr[match( state_pairs$state2, states$state)]
g = graph.data.frame(state_pairs[, 3:4], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
plot(g)
g.shortestpath.m = shortest.paths(g)
str(g.shortestpath.m)
sorted.names = sort( rownames(g.shortestpath.m) )
gsm = g.shortestpath.m[, sorted.names]
gsm = gsm[sorted.names, ]
summary(states$year)
table(states$year)
hist(states$year, br=20)
cutoff = c(1788, 1830, 1888)
cutoff[3]
year2bin = function( inYear ){
bin = 0;
if ( inYear <= cutoff[1]) {    bin = 1;  }
else if (inYear <= cutoff[2] ) {    bin = 2;  }
else if (inYear <= cutoff[3])  {    bin = 3;  }
else {  bin = 4;  }
return(bin)
}
year2bin(1730)
year2bin(1790)
year2bin(1850)
year2bin(1980)
unlist(lapply(states[, c("year")],  year2bin))
states$bin = unlist(lapply(states[, c("year")],  year2bin))
View(states)
state_pairs$state1bin = states$bin[match( state_pairs$state1, states$state)]
state_pairs$state2bin = states$bin[match( state_pairs$state2, states$state)]
View(state_pairs)
ms02_pairs= read.csv("48statesMS02/_ms02_48states.1.csv")
ms02_pairs = ms02_pairs[,1:2]
ms02_pairs$id1A = states$abbr[match( ms02_pairs$id1, states$state)]
ms02_pairs$id2A = states$abbr[match( ms02_pairs$id2, states$state)]
ms02_pairs$state1bin = states$bin[match( ms02_pairs$id1, states$state)]
ms02_pairs$state2bin = states$bin[match( ms02_pairs$id2, states$state)]
g.ms02 = graph.data.frame(ms02_pairs[, 3:4], directed=F)
plot(g.ms02)
plot(g.ms02)
plot(g.ms02)
plot(g.ms02)
plot(g.ms02)
plot(g.ms02)
plot(g.ms02)
gms02.degree = degree(g.ms02)
gms02.degree = degree(g.ms02)
gms02.gegree
gms02.degree = degree(g.ms02)
gms02.degree
gms02.degree = degree(g.ms02)
sort(gms02.degree)
g2.ms02 = graph.data.frame(ms02_pairs[, c("state1bin","state2bin")], directed=F)
plot(g2.ms02)
