pairs= read.csv("Data/yeast.pin.csv", colClasses = c("character", "character"))
rls.tb = read.csv("Data/RLS.all.csv")
View(rls.tb)
summyar(rls.tb)
summary(rls.tb)
#h = hist(log2(g.degree), br = 10)
myq = quantile( g.degree, prob = seq(0, 1, by=0.05))
g = graph.data.frame(pairs[, 1:2], directed=F)
g.degree = degree(g)
g.degree [g.degree == max(g.degree)] #TN and MO have 8 bordering states
#h = hist(log2(g.degree), br = 10)
myq = quantile( g.degree, prob = seq(0, 1, by=0.05))
d.myq = data.frame(myq)
d.myq$Q = rownames(d.myq)
names(d.myq) = c("k", "Q")
degree2Q = function( k ){
sub = d.myq[ d.myq$k <= k, ]
return (  sub$Q[ sub$k == max(sub$k)] )
}
degree2Q(1)
degree2Q(2)
degree2Q(1E3)
degree2Q(1E4)
g.q = unlist(lapply( g.degree, degree2Q))
g.q[1:10]
str(rls.tb)
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("chr", "num"))
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
str(rls.tb)
#h = hist(log2(g.degree), br = 10)
myq = quantile( g.degree, prob = seq(0, 1, by=0.05))
d.myq = data.frame(myq)
d.myq$Q = rownames(d.myq)
names(d.myq) = c("k", "Q")
degree2Q = function( k ){
sub = d.myq[ d.myq$k <= k, ]
return (  sub$Q[ sub$k == max(sub$k)] )
}
degree2Q(1)
degree2Q(2)
degree2Q(1E3)
degree2Q(1E4)
g.q = unlist(lapply( g.degree, degree2Q))
g.q[1:10]
View(rls.tb)
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = seq(0, 1, by=0.05))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
#names(d.myq) = c("k", "Q")
View(d.myq.rls)
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = seq(0.15, 1, by=0.05))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
#names(d.myq) = c("k", "Q")
View(d.myq.rls)
sub = rls.tb[rls.tb$RLS < 1, ]
length(sub[,2])
length(rls.tb[,2])
1017/5748
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = c( 0.1769, seq(0.2, 1, by=0.05)))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
#names(d.myq) = c("k", "Q")
View(d.myq.rls)
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = c( 0.175, seq(0.2, 1, by=0.05)))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
#names(d.myq) = c("k", "Q")
View(d.myq.rls)
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = c( 0.175, seq(0.2, 1, by=0.05)))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
names(d.myq) = c("RLS", "Q")
View(d.myq.rls)
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = c( 0.175, seq(0.2, 1, by=0.05)))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
names(d.myq.rls) = c("RLS", "Q")
View(d.myq.rls)
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = c( 0.175, seq(0.2, 1, by=0.05)))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
names(d.myq.rls) = c("RLS", "Q")
g.q.rls = unlist(lapply( rls.tb$RLS, degree2Q))
x = 20
x = 20
RLS2Q = function( x ){
if ( max(d.myq.rls$RLS ) > x) {
sub = d.myq.rls[ d.myq.rls$RLS <= x, ]
return (  sub$Q[ sub$RLS == max(sub$RLS)] )
} else {
return("100%")
}
}
RLS2Q(20)
RLS2Q(0)
RLS2Q(40)
g.q.rls = unlist(lapply( rls.tb$RLS, degree2Q))
unlist(lapply( rls.tb$RLS, RLS2Q))
g.q.rls = unlist(lapply( rls.tb$RLS, RLS2Q))
summary(g.q.rls)
g.q.rls[1:5]
rls.tb.rls$Q = unlist(lapply( rls.tb$RLS, RLS2Q))
rls.tb$Q = unlist(lapply( rls.tb$RLS, RLS2Q))
View(rls.tb)
x = 0
RLS2Q(10)
View(d.myq.rls)
x=10
sub = d.myq.rls[ d.myq.rls$RLS <= x, ]
sub
RLS2Q = function( x ){
if ( max(d.myq.rls$RLS ) > x) {
sub = d.myq.rls[ d.myq.rls$RLS >= x, ]
return (  sub$Q[ sub$RLS == min(sub$RLS)] )
} else {
return("100%")
}
}
RLS2Q(0)
RLS2Q(10)
RLS2Q(40)
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = c( 0.175, seq(0.2, 1, by=0.05)))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
names(d.myq.rls) = c("RLS", "Q")
RLS2Q = function( x ){
if ( max(d.myq.rls$RLS ) > x) {
sub = d.myq.rls[ d.myq.rls$RLS >= x, ]
return (  sub$Q[ sub$RLS == min(sub$RLS)] )
} else {
return("100%")
}
}
RLS2Q(0)
RLS2Q(10)
RLS2Q(40)
rls.tb$Q = unlist(lapply( rls.tb$RLS, RLS2Q))
str(rls.tb)
pairs$cat1 = as.character( rls.tb$Q[rls.tb$Gene == pairs$geneA] )
g.rls.Q = rls.tb$Q
names(g.rls.Q) = rls.tb$Gene
head(g.rls.Q)
pairs$cat1 = as.character( g.rls.Q[pairs$geneA] )
View(pairs)
str(pairs)
rm(list=ls())
start = Sys.time()
debug = 5
library(igraph)
pairs= read.csv("Data/yeast.pin.csv", colClasses = c("character", "character"))
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = c( 0.175, seq(0.2, 1, by=0.05)))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
names(d.myq.rls) = c("RLS", "Q")
RLS2Q = function( x ){
if ( max(d.myq.rls$RLS ) > x) {
sub = d.myq.rls[ d.myq.rls$RLS >= x, ]
return (  sub$Q[ sub$RLS == min(sub$RLS)] )
} else {
return("100%")
}
}
RLS2Q(0)
RLS2Q(10)
RLS2Q(40)
rls.tb$Q = unlist(lapply( rls.tb$RLS, RLS2Q))
g.rls.Q = rls.tb$Q
names(g.rls.Q) = rls.tb$Gene
pairs$cat1 = as.character( g.rls.Q[pairs$geneA] )
pairs$cat2 = as.character( g.rls.Q[pairs$geneB] )
View(pairs)
View(pairs)
pairs[ pairs$geneA == "YAL002W", ]
rls.tb$[rls.tb$Gene=="YAL002W"] #visual check passed
pairs[ pairs$geneA == "YAL002W", ]
rls.tb[rls.tb$Gene=="YAL002W",] #visual check passed
tags = t(apply(pairs[,c("cat1", "cat2")], 1, sort))
View(tags)
str(tags)
rm(list=ls())
start = Sys.time()
debug = 5
library(igraph)
pairs= read.csv("Data/yeast.pin.csv", colClasses = c("character", "character"))
rm(list=ls())
start = Sys.time()
debug = 5
library(igraph)
pairs= read.csv("Data/yeast.pin.csv", colClasses = c("character", "character"))
if (debug > 1) {
pairs = pairs[1:1E3,]
}
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = c( 0.175, seq(0.2, 1, by=0.05)))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
names(d.myq.rls) = c("RLS", "Q")
RLS2Q = function( x ){
if ( max(d.myq.rls$RLS ) > x) {
sub = d.myq.rls[ d.myq.rls$RLS >= x, ]
return (  sub$Q[ sub$RLS == min(sub$RLS)] )
} else {
return("100%")
}
}
RLS2Q(0)
RLS2Q(10)
RLS2Q(40)
rls.tb$Q = unlist(lapply( rls.tb$RLS, RLS2Q))
g.rls.Q = rls.tb$Q
names(g.rls.Q) = rls.tb$Gene
pairs$cat1 = as.character( g.rls.Q[pairs$geneA] )
pairs$cat2 = as.character( g.rls.Q[pairs$geneB] )
pairs$cat1 = as.character( g.rls.Q[pairs$geneA] )
pairs$cat2 = as.character( g.rls.Q[pairs$geneB] )
pairs$cat1[is.na(pairs$cat1)] = "NA"
pairs$cat2[is.na(pairs$cat2)] = "NA"
View(pairs)
View(pairs)
pairs[ pairs$geneA == "YAL002W", ]
rls.tb[rls.tb$Gene=="YAL002W",] #visual check passed
apply(pairs[,c("cat1", "cat2")], 1, sort)
tags = t(apply(pairs[,c("cat1", "cat2")], 1, sort))
tags = t(apply(pairs[,c("cat1", "cat2")], 1, sort))
pairs$tag = paste( tags[,1], tags[,2], sep='_')
View(pairs)
pairs$cat1 = as.character( g.rls.Q[pairs$geneA] )
pairs$cat2 = as.character( g.rls.Q[pairs$geneB] )
pairs$cat1[is.na(pairs$cat1)] = "NA"
pairs$cat2[is.na(pairs$cat2)] = "NA"
pairs[ pairs$geneA == "YAL002W", ]
rls.tb[rls.tb$Gene=="YAL002W",] #visual check passed
tags = t(apply(pairs[,c("cat1", "cat2")], 1, sort))
pairs$tag = paste( tags[,1], tags[,2], sep='_')
F.obs = data.frame( table(pairs$tag))
names(F.obs) = c("tag", "freq")
F.obs [1:10,]
View(F.obs)
ms02files = list.files(path='yeastMS02')
if (debug ) {ms02files = ms02files[1: 5] }
F.ms02 = data.frame(matrix(data=NA, nrow=1, ncol=3)) #null distributions
names(F.ms02) = c('tag', 'freq', 'file')
# file = "ms02.1.csv" #debug
for (file in ms02files ){
if ( debug > 0 ) { print(file) }
ms02_pairs= read.csv(paste("yeastMS02/", file, sep=''),
colClasses = c("character", "character"))
ms02_pairs = ms02_pairs[,1:2]
ms02_pairs$cat1 = as.character( g.rls.Q[ms02_pairs$geneA] )
ms02_pairs$cat2 = as.character( g.rls.Q[ms02_pairs$geneB] )
ms02_pairs$cat1[is.na(ms02_pairs$cat1)] = "NA"
ms02_pairs$cat2[is.na(ms02_pairs$cat2)] = "NA"
tags2 = t(apply(ms02_pairs[,c("cat1", "cat2")], 1, sort))
ms02_pairs$tag = paste( tags2[,1], tags2[,2], sep='_')
F.ms02current = data.frame( table(ms02_pairs$tag))
F.ms02current$file = file
names(F.ms02current) = c('tag', 'freq', 'file')
F.ms02 =  data.frame( rbind(F.ms02, data.frame(F.ms02current)) )
}
View(ms02_pairs)
ms02files = list.files(path='yeastMS02')
if (debug ) {ms02files = ms02files[1: 5] }
F.ms02 = data.frame(matrix(data=NA, nrow=1, ncol=3)) #null distributions
names(F.ms02) = c('tag', 'freq', 'file')
# file = "ms02.1.csv" #debug
for (file in ms02files ){
if ( debug > 0 ) { print(file) }
ms02_pairs= read.csv(paste("yeastMS02/", file, sep=''),
colClasses = c("character", "character"))
ms02_pairs = ms02_pairs[,1:2]
ms02_pairs$cat1 = as.character( g.rls.Q[ms02_pairs$id1] )
ms02_pairs$cat2 = as.character( g.rls.Q[ms02_pairs$id2] )
ms02_pairs$cat1[is.na(ms02_pairs$cat1)] = "NA"
ms02_pairs$cat2[is.na(ms02_pairs$cat2)] = "NA"
tags2 = t(apply(ms02_pairs[,c("cat1", "cat2")], 1, sort))
ms02_pairs$tag = paste( tags2[,1], tags2[,2], sep='_')
F.ms02current = data.frame( table(ms02_pairs$tag))
F.ms02current$file = file
names(F.ms02current) = c('tag', 'freq', 'file')
F.ms02 =  data.frame( rbind(F.ms02, data.frame(F.ms02current)) )
}
F.ms02 = F.ms02[ !is.na(F.ms02$tag), ]
summary(F.ms02)
all_tags = unique( allCombinationsOfTwoVectors(d.myq.rls$Q, d.myq.rls$Q) )
all_tags = unique( allCombinationsOfTwoVectors(d.myq.rls$Q, d.myq.rls$Q) )
allCombinationsOfTwoVectors = function (els1, els2 ) {
tagbuffer = c();
for (e1 in els1) {
for (e2 in els2) {
tmp = sort(c(e1, e2));
current_tag = paste(tmp[1], tmp[2], sep="_")
tagbuffer = c(tagbuffer, current_tag)
}
}
return( tagbuffer)
}
all_tags = unique( allCombinationsOfTwoVectors(d.myq.rls$Q, d.myq.rls$Q) )
Zs = data.frame(all_tags)
names(Zs) = c('tag')
Zs$freq = ifelse( all_tags %in% Zs$tag, F.obs$freq[ match( Zs$tag , F.obs$tag) ], 0)
Zs$freq[is.na(Zs$freq)] = 0;
summary(Zs)
View(Zs)
for (i in 1 : length(Zs$tag)) {
#i = 2
sub = F.ms02[ F.ms02$tag == Zs$tag[i], ]
if ( length(sub[,1])> 0) {
Zs$Z[i] = ( Zs$freq[i] - mean(sub$freq) ) / max(sd(sub$freq), 0.5)
if(debug>1 ){
print( paste( Zs$tag[i],"lenthg(sub[,1]):",length(sub[,1]), "mean:", mean(sub$freq), "sd:", sd(sub$freq) ))
sub
}
} else {
#Zs$Z[i] = ( Zs$freq[i] - 0 ) / 1E-10  #never observed in ms02 nulls?? what to do??
Zs$Z[i] = 999  #never observed in ms02 nulls?? what to do??
if(debug>0 ){
print( paste( Zs$tag[i],"lenthg(sub[,1]):",length(sub[,1]), "mean:", mean(sub$freq), "sd:", sd(sub$freq) ))
}
}
}
summary(Zs$Z)
#unique categories
cats =  as.character( d.myq$Q ) # do not sort this
#unique categories
cats =  as.character( d.myq.rls$Q ) # do not sort this
Zmat = matrix(NA, ncol=length(cats), nrow=length(cats))
colnames(Zmat) = cats;
rownames(Zmat) = rev(cats);
for (i in 1:length(cats)){#row
for (  j in 1:length(cats)) { #column
tmp = sort(c(cats[i], rev(cats)[j]))
mytag = paste(tmp[1], tmp[2], sep="_")
if( mytag %in% Zs$tag) {
Zmat[i,j] = Zs$Z[ Zs$tag == mytag ]
} else {
Zmat[i,j] = NA
}
if (debug >1 ) {
print (paste(mytag, Zmat[i,j] ) )
}
}
}
Zmat
library(gplots)
#colors = c(seq(min(Zmat),-10.1,length=100),seq(-9.9,9.9,length=100),seq(10.1,max(Zmat),length=100))
my_palette <- colorRampPalette(c("blue2", "white", "red2"))(n = 299)
heatmap.2( as.matrix(Zmat), col=my_palette, scale="none",
# margins = c(5,4), key.title = NA,
,key.xlab="Z-score", key.ylab=NA,
dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none'
)
View(Zmat)
rm(list=ls())
start = Sys.time()
debug = 5
library(igraph)
pairs= read.csv("Data/yeast.pin.csv", colClasses = c("character", "character"))
if (debug > 9) {
pairs = pairs[1:1E3,]
}
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
myq.rls = quantile( rls.tb[,2], prob = c( 0.175, seq(0.2, 1, by=0.05)))
d.myq.rls = data.frame(myq.rls)
d.myq.rls$Q = rownames(d.myq.rls)
names(d.myq.rls) = c("RLS", "Q")
RLS2Q = function( x ){
if ( max(d.myq.rls$RLS ) > x) {
sub = d.myq.rls[ d.myq.rls$RLS >= x, ]
return (  sub$Q[ sub$RLS == min(sub$RLS)] )
} else {
return("100%")
}
}
RLS2Q(0)
RLS2Q(10)
RLS2Q(40)
rls.tb$Q = unlist(lapply( rls.tb$RLS, RLS2Q))
g.rls.Q = rls.tb$Q
names(g.rls.Q) = rls.tb$Gene
pairs$cat1 = as.character( g.rls.Q[pairs$geneA] )
pairs$cat2 = as.character( g.rls.Q[pairs$geneB] )
pairs$cat1[is.na(pairs$cat1)] = "NA"
pairs$cat2[is.na(pairs$cat2)] = "NA"
pairs[ pairs$geneA == "YAL002W", ]
rls.tb[rls.tb$Gene=="YAL002W",] #visual check passed
tags = t(apply(pairs[,c("cat1", "cat2")], 1, sort))
pairs$tag = paste( tags[,1], tags[,2], sep='_')
F.obs = data.frame( table(pairs$tag))
names(F.obs) = c("tag", "freq")
F.obs [1:10,]
ms02files = list.files(path='yeastMS02')
if (debug > 0 ) {ms02files = ms02files[1: 5] }
F.ms02 = data.frame(matrix(data=NA, nrow=1, ncol=3)) #null distributions
names(F.ms02) = c('tag', 'freq', 'file')
# file = "ms02.1.csv" #debug
for (file in ms02files ){
if ( debug > 0 ) { print(file) }
ms02_pairs= read.csv(paste("yeastMS02/", file, sep=''),
colClasses = c("character", "character"))
ms02_pairs = ms02_pairs[,1:2]
ms02_pairs$cat1 = as.character( g.rls.Q[ms02_pairs$id1] )
ms02_pairs$cat2 = as.character( g.rls.Q[ms02_pairs$id2] )
ms02_pairs$cat1[is.na(ms02_pairs$cat1)] = "NA"
ms02_pairs$cat2[is.na(ms02_pairs$cat2)] = "NA"
tags2 = t(apply(ms02_pairs[,c("cat1", "cat2")], 1, sort))
ms02_pairs$tag = paste( tags2[,1], tags2[,2], sep='_')
F.ms02current = data.frame( table(ms02_pairs$tag))
F.ms02current$file = file
names(F.ms02current) = c('tag', 'freq', 'file')
F.ms02 =  data.frame( rbind(F.ms02, data.frame(F.ms02current)) )
}
F.ms02 = F.ms02[ !is.na(F.ms02$tag), ]
summary(F.ms02)
allCombinationsOfTwoVectors = function (els1, els2 ) {
tagbuffer = c();
for (e1 in els1) {
for (e2 in els2) {
tmp = sort(c(e1, e2));
current_tag = paste(tmp[1], tmp[2], sep="_")
tagbuffer = c(tagbuffer, current_tag)
}
}
return( tagbuffer)
}
all_tags = unique( allCombinationsOfTwoVectors(d.myq.rls$Q, d.myq.rls$Q) )
Zs = data.frame(all_tags)
names(Zs) = c('tag')
Zs$freq = ifelse( all_tags %in% Zs$tag, F.obs$freq[ match( Zs$tag , F.obs$tag) ], 0)
Zs$freq[is.na(Zs$freq)] = 0;
summary(Zs)
for (i in 1 : length(Zs$tag)) {
#i = 2
sub = F.ms02[ F.ms02$tag == Zs$tag[i], ]
if ( length(sub[,1])> 0) {
Zs$Z[i] = ( Zs$freq[i] - mean(sub$freq) ) / max(sd(sub$freq), 0.5)
if(debug>1 ){
print( paste( Zs$tag[i],"lenthg(sub[,1]):",length(sub[,1]), "mean:", mean(sub$freq), "sd:", sd(sub$freq) ))
sub
}
} else {
#Zs$Z[i] = ( Zs$freq[i] - 0 ) / 1E-10  #never observed in ms02 nulls?? what to do??
Zs$Z[i] = 999  #never observed in ms02 nulls?? what to do??
if(debug>0 ){
print( paste( Zs$tag[i],"lenthg(sub[,1]):",length(sub[,1]), "mean:", mean(sub$freq), "sd:", sd(sub$freq) ))
}
}
}
summary(Zs$Z)
#unique categories
cats =  as.character( d.myq.rls$Q ) # do not sort this
Zmat = matrix(NA, ncol=length(cats), nrow=length(cats))
colnames(Zmat) = cats;
rownames(Zmat) = rev(cats);
for (i in 1:length(cats)){#row
for (  j in 1:length(cats)) { #column
tmp = sort(c(cats[i], rev(cats)[j]))
mytag = paste(tmp[1], tmp[2], sep="_")
if( mytag %in% Zs$tag) {
Zmat[i,j] = Zs$Z[ Zs$tag == mytag ]
} else {
Zmat[i,j] = NA
}
if (debug >1 ) {
print (paste(mytag, Zmat[i,j] ) )
}
}
}
Zmat
for( i in 1:length(Zmat[1,])) {
for( j in 1:length(Zmat[,1])){
Zmat[i,j] =  ifelse( Zmat[i,j] > 10  , 10, Zmat[i,j] )
Zmat[i,j] =  ifelse( Zmat[i,j] < -10, -10, Zmat[i,j] )
}
}
library(gplots)
#colors = c(seq(min(Zmat),-10.1,length=100),seq(-9.9,9.9,length=100),seq(10.1,max(Zmat),length=100))
my_palette <- colorRampPalette(c("blue2", "white", "red2"))(n = 299)
heatmap.2( as.matrix(Zmat), col=my_palette, scale="none",
# margins = c(5,4), key.title = NA,
,key.xlab="Z-score", key.ylab=NA,
dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none'
)
colors = c( seq(min(Zmat, na.rm =T), -10.1, length=100),
seq(-9.9,9.9,length=100),seq(10.1,max(Zmat,na.rm=T),length=100) )
my_palette <- colorRampPalette(c("blue2", "white", "red2"))(n = 299)
heatmap.2(as.matrix(Zmat), col=my_palette, breaks=colors,
trace='none', offsetRow = 0, offsetCol = 0,
#ylab="Biological Process Terms", xlab="Biological Process Terms",
#margins = c(2,2), key.title = "Color Bar", key.xlab="Z-score", key.ylab=NA,
#labCol = NA, labRow = NA,
scale="none", dendrogram = "none", Rowv=FALSE, Colv=FALSE,
#symbreaks=T, symm=F, symkey = F
)
rm(list=ls())
start = Sys.time()
debug = 5
library(igraph)
pairs= read.csv("Data/yeast.pin.csv", colClasses = c("character", "character"))
if (debug > 9) {
pairs = pairs[1:1E3,]
}
rls.tb = read.csv("Data/RLS.all.csv", colClasses = c("character", "numeric"))
