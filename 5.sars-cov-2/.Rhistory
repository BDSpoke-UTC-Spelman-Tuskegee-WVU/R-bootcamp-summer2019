ungroup() %>%
separate(state, into=c("region", "st"), sep=",", fill="left", remove=FALSE) %>%
mutate(st=state_names[str_trim(st)], region=str_trim(region)) %>%
mutate(state=if_else(is.na(st), state, st)) %>%
select(-st)
us_states_current <- us_states %>%
group_by(state, date) %>%
summarize(cases=sum(confirmed)) %>%
filter(date <= cutoff_date) %>%
arrange(state, date) %>%
slice(n())
cutoff_date <- today()
states_map %>%
left_join(
us_states_current %>%
mutate(fips = state_abbreviations[state],
region = tolower(state)) %>%
filter(!is.na(region)) %>%
select(region, cases)
) %>%
ggplot(aes(long, lat, group = group)) +
geom_polygon(aes(fill = cases), color = "white") +
scale_fill_viridis_c(option = "C") +
coord_fixed(1.3) +
ggtitle(cutoff_date)
by_country <- complete %>%
group_by(country, date) %>%
summarize(confirmed=sum(confirmed), recovered=sum(recovered), deaths=sum(deaths))
library(tidyverse)
library(lubridate)
require(maps)
require(viridis)
library(ggthemes)
library(gganimate)
library(gifski)
library(usmap)
states_map <- map_data("state")
data_dir <- "COVID-19/csse_covid_19_data/csse_covid_19_time_series"
state_abbreviations <- c("AL", "AK", "AZ", "KS", "UT", "CO", "CT",
"DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "AR",
"KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO",
"MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
"OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
"CA", "VT", "VA", "WA", "WV", "WI", "WY", "DC")
state_names <- c("Alabama", "Alaska", "Arizona", "Kansas",
"Utah", "Colorado", "Connecticut", "Delaware", "Florida",
"Georgia", "Hawaii", "Idaho", "Illinois", "Indiana",
"Iowa", "Arkansas", "Kentucky", "Louisiana", "Maine",
"Maryland", "Massachusetts", "Michigan", "Minnesota",
"Mississippi", "Missouri", "Montana", "Nebraska", "Nevada",
"New Hampshire", "New Jersey", "New Mexico", "New York",
"North Carolina", "North Dakota", "Ohio",
"Oklahoma", "Oregon", "Pennsylvania", "Rhode Island",
"South Carolina", "South Dakota", "Tennessee", "Texas",
"California", "Vermont", "Virginia", "Washington", "West Virginia",
"Wisconsin", "Wyoming", "District of Columbia")
names(state_names) <- state_abbreviations
names(state_abbreviations) <- state_names
lag_countries <- c("China","Italy","Spain","US")
lag_days <- c(0, 33, 44, 44)
names(lag_days) <- lag_countries
# load and tidy the data
confirmed <- read_csv(paste0(data_dir, "/time_series_19-covid-Confirmed.csv")) %>%
pivot_longer(cols=c(-`Province/State`, -`Country/Region`, -Lat, -Long),
names_to="date",
values_to="cases") %>%
rename("country" = `Country/Region`, "state" = `Province/State`) %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
rename("confirmed" = cases)
deaths <- read_csv(paste0(data_dir, "/time_series_19-covid-Deaths.csv")) %>%
pivot_longer(cols=c(-`Province/State`, -`Country/Region`, -Lat, -Long),
names_to="date",
values_to="cases") %>%
rename("country" = `Country/Region`, "state" = `Province/State`) %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
rename("deaths" = cases)
recovered <- read_csv(paste0(data_dir, "/time_series_19-covid-Recovered.csv")) %>%
pivot_longer(cols=c(-`Province/State`, -`Country/Region`, -Lat, -Long),
names_to="date",
values_to="cases") %>%
rename("country" = `Country/Region`, "state" = `Province/State`) %>%
mutate(date = as.Date(date, "%m/%d/%y")) %>%
rename("recovered" = cases)
# join the variables
complete <- confirmed %>%
left_join(recovered) %>%
left_join(deaths)
by_region <- complete %>%
filter(country=="US") %>%
mutate(state = recode(state,
"Washington, D.C."="District of Columbia",
"Virgin Islands, U.S."="US Virgin Islands")) %>%
group_by(state, date) %>%
summarize(confirmed=sum(confirmed), recovered=sum(recovered), deaths=sum(deaths))
by_region_current <- by_region %>%
group_by(state) %>%
summarize(confirmed=max(confirmed), recovered=max(recovered), deaths=max(deaths))
us_states <- by_region %>%
ungroup() %>%
separate(state, into=c("region", "st"), sep=",", fill="left", remove=FALSE) %>%
mutate(st=state_names[str_trim(st)], region=str_trim(region)) %>%
mutate(state=if_else(is.na(st), state, st)) %>%
select(-st)
us_states_current <- us_states %>%
group_by(state, date) %>%
summarize(cases=sum(confirmed)) %>%
filter(date <= cutoff_date) %>%
arrange(state, date) %>%
slice(n())
cutoff_date <- today()
states_map %>%
left_join(
us_states_current %>%
mutate(fips = state_abbreviations[state],
region = tolower(state)) %>%
filter(!is.na(region)) %>%
select(region, cases)
) %>%
ggplot(aes(long, lat, group = group)) +
geom_polygon(aes(fill = cases), color = "white") +
scale_fill_viridis_c(option = "C") +
coord_fixed(1.3) +
ggtitle(cutoff_date)
by_country <- complete %>%
group_by(country, date) %>%
summarize(confirmed=sum(confirmed), recovered=sum(recovered), deaths=sum(deaths))
by_country %>%
filter(country=="Italy" | country=="US") %>%
mutate("day" = date - min(date),
"lag_date" = if_else(country=="Italy", date, date - days(11)),
"lag_days" = lag_date - min(date)) %>%
ggplot(aes(x=lag_days, y=confirmed, group=country)) +
geom_point(aes(color=country)) +
xlab("Day of pandemic") +
ylab("Confirmed cases") +
xlim(20, NA) +
ggtitle(cutoff_date)
by_country %>%
filter(country %in% lag_countries) %>%
mutate("day" = date - min(date),
"lag_date" = date - lag_days[country],
"lag_days" = lag_date - min(date)) %>%
ggplot(aes(x=lag_days, y=confirmed, group=country)) +
geom_point(aes(color=country)) +
xlab("Day of pandemic") +
ylab("Confirmed cases") +
xlim(0, NA) +
ylim(0, 30000) +
ggtitle(cutoff_date)
# focal state
focal_states <- c("New York", "California", "Washington")
us_states %>%
group_by(state, date) %>%
summarize(cases=sum(confirmed)) %>%
filter(date <= cutoff_date, state %in% focal_states) %>%
arrange(state, date) %>%
ggplot(aes(x=date, y=cases, group=state)) +
geom_point(aes(color=state)) +
geom_line(aes(color=state)) +
xlab("Day of pandemic") +
ylab("Confirmed cases") +
#  xlim(0, NA) +
#  ylim(0, 30000) +
ggtitle(cutoff_date)
bay_area_counties <- c("San Francisco County", "Santa Clara County", "San Mateo", "Marin", "Contra Costa County", "Sonoma County", "Alameda County")
ts1 = tb.hotspots[1, names(tb.hotspots)[c(1:12, length(names(tb.hotspots)))]]
View(ts1)
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-1))]]
View(ts1)
View(tb)
rm(list=ls())
library(tidyverse)
library(readr)
library(dplyr)
infile ="time_series_covid19_confirmed_US.csv"
tb = read_csv(infile)
head(tb)
dim(tb)
colnames(tb)[1:11]
colnames = names(tb)
#start = (1:length(tb[1,]))[colnames == "1/22/20"]  # beginning data
start = (1:length(tb[1,]))[colnames == "3/1/20"]
total.timepoints = length(tb[1,]) - start
start: total.timepoints
print( paste( "There are", total.timepoints  + 1, "time points"))
tb.sub = tb[, start: (start + total.timepoints)] # pick the actual data
#summary(tb.sub)
tb$totalcasesbyrow= apply(tb.sub, 1, sum)
hist(log10(tb$totalcasesbyrow))
qcutoff= quantile(tb$totalcasesbyrow, probs=c(0, 0.5,  0.75 ) )[3]
qcutoff
tb.hotspots = filter(tb, totalcasesbyrow >= qcutoff & Lat != 0)
nrow(tb.hotspots[,1])
#order(tb.q95$totalcasesbyrow)
tb.hotspots = tb.hotspots[ order(tb.hotspots$totalcasesbyrow, decreasing = TRUE) , ]
library(R0)
debug = 0
#for( i in 1:10){
for( i in 1:nrow(tb.hotspots[,1])){
x = as.vector(t(tb.hotspots[i, start:(start+total.timepoints)]))
if( debug > 0) {
print(paste("i=", i))
#print(x)
}
#str(x)
mGT= generation.time("gamma", c(3, 1.5))
R0EG = estimate.R(x, GT=mGT,  methods=c('EG'), pop.size = 100000, nsim=10 )
tb.hotspots$R0EG[i] = as.numeric(unlist(R0EG$estimates$EG$R))
}
#tb.hotspots$R0EG
hist(tb.hotspots$R0EG, br = 40)
tb.hotspots = filter(tb.hotspots, R0EG < 4.0 )
plot( tb.hotspots$R0EG ~ tb.hotspots$Lat )
text( tb.hotspots$Lat, tb.hotspots$R0EG, tb.hotspots$Admin2)
m = lm(tb.hotspots$R0EG  ~ tb.hotspots$Lat  )
abline(m, col='red')
m = lm(tb.hotspots$R0EG  ~ tb.hotspots$Lat  )
summary(m)
write_csv(tb.hotspots, path="test.csv")
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-1))]]
out = tb.hotspots[, names(tb.hotspots)[1:12, -1]]
out = tb.hotspots[, names(tb.hotspots)[c(1:12, -1)]]
out = tb.hotspots[, names(tb.hotspots)[c(1:12, length(names(tb.hotspots)))]]
write_csv(out, path="test.csv")
View(out)
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-1))]]
ts1 = t(ts1)
View(ts1)
View(out)
View(ts1)
View(tb.hotspots)
date = as.Date(names(ts1), "%m-%d-%Y")
date = as.Date(row.names(ts1), "%m-%d-%Y")
date = as.Date(row.names(ts1), "%m-%d-%Y")
date
row.names(ts1)
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-2))]]
ts1 = t(ts1)
date = as.Date(row.names(ts1), "%m-%d-%Y")
date
row.names(ts1)
date = as.Date(row.names(ts1), "%m-%d-%Y")
row.names(ts1)
date = as.Date(row.names(ts1), "%m-%d-%y")
date
row.names(ts1)
date = parse_date(row.names(ts1), "%m-%d-%y")
date
row.names(ts1)
date = parse_date(row.names(ts1), "%m/%d/%y")
date
p <- ggplot(ts1, aes(x=day, y=ts1)) +
geom_line() +
xlab("")
p <- ggplot(as.dataframe(ts1), aes(x=day, y=ts1)) +
geom_line() +
xlab("")
?data.frame
p <- ggplot(data.frame(ts1), aes(x=day, y=ts1)) +
geom_line() +
xlab("")
p
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-2))]]
ts1 = t(ts1)
row.names(ts1)
day = parse_date(row.names(ts1), "%m/%d/%y")
day
data = data.frame(cbind(day, ts1))
View(data)
p <- ggplot(data, aes(x=day, y=cases)) +
geom_line() +
xlab("")
p
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-2))]]
ts1 = t(ts1)
row.names(ts1)
day = parse_date(row.names(ts1), "%m/%d/%y")
day
data = data.frame(cbind(day, ts1))
names(data) = c("day", "cases")
View(data)
ggplot(data, aes(x=day, y=cases))
ggplot(data, aes(x=day, y=cases))
+ geom_line()
ggplot(data, aes(x=day, y=cases)  + geom_line()
ggplot(data, aes(x=day, y=cases)) + geom_line()
ggplot(data, aes(x=day, y=cases)) + geom_line() + xlab("")
p <- ggplot(data, aes(x=day, y=cases)) + geom_line() + xlab("")
p
p <- ggplot(data, aes(x=day, y=cases)) + geom_line() + xlab("")
#p
p + scale_x_date(date_labels = "%Y %b %d")
p <- ggplot(data, aes(x=day, y=cases)) + geom_line() + xlab("")
#p
p + scale_x_date(date_labels = "%Y %m %d")
p <- ggplot(data, aes(x=day, y=cases)) + geom_line() + xlab("")
#p
p + scale_x_date(date_labels = "%Y %m %d")
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-2))]]
ts1 = t(ts1)
row.names(ts1)
#day = parse_date(row.names(ts1), "%m/%d/%y")
day = as.Date(row.names(ts1), "%m/%d/%y")
day
data = data.frame(cbind(day, ts1))
names(data) = c("day", "cases")
p <- ggplot(data, aes(x=day, y=cases)) + geom_line() + xlab("")
#p
p + scale_x_date(date_labels = "%Y %m %d")
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-2))]]
ts1 = t(ts1)
row.names(ts1)
#day = parse_date(row.names(ts1), "%m/%d/%y")
data <- data.frame(
#day = as.Date("2017-06-14") - 0:364,
day = as.Date(row.names(ts1), "%m/%d/%y")
cases = ts1
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-2))]]
ts1 = t(ts1)
row.names(ts1)
#day = parse_date(row.names(ts1), "%m/%d/%y")
data <- data.frame(
#day = as.Date("2017-06-14") - 0:364,
day = as.Date(row.names(ts1), "%m/%d/%y"),
cases = ts1
)
View(data)
rm(list=ls())
library(tidyverse)
library(readr)
library(dplyr)
infile ="time_series_covid19_confirmed_US.csv"
tb = read_csv(infile)
head(tb)
dim(tb)
colnames(tb)[1:11]
colnames = names(tb)
#start = (1:length(tb[1,]))[colnames == "1/22/20"]  # beginning data
start = (1:length(tb[1,]))[colnames == "3/1/20"]
total.timepoints = length(tb[1,]) - start
start: total.timepoints
print( paste( "There are", total.timepoints  + 1, "time points"))
tb.sub = tb[, start: (start + total.timepoints)] # pick the actual data
#summary(tb.sub)
tb$totalcasesbyrow= apply(tb.sub, 1, sum)
hist(log10(tb$totalcasesbyrow))
qcutoff= quantile(tb$totalcasesbyrow, probs=c(0, 0.5,  0.75 ) )[3]
qcutoff
tb.hotspots = filter(tb, totalcasesbyrow >= qcutoff & Lat != 0)
nrow(tb.hotspots[,1])
#order(tb.q95$totalcasesbyrow)
tb.hotspots = tb.hotspots[ order(tb.hotspots$totalcasesbyrow, decreasing = TRUE) , ]
library(R0)
debug = 0
#for( i in 1:10){
for( i in 1:nrow(tb.hotspots[,1])){
x = as.vector(t(tb.hotspots[i, start:(start+total.timepoints)]))
if( debug > 0) {
print(paste("i=", i))
#print(x)
}
#str(x)
mGT= generation.time("gamma", c(3, 1.5))
R0EG = estimate.R(x, GT=mGT,  methods=c('EG'), pop.size = 100000, nsim=10 )
tb.hotspots$R0EG[i] = as.numeric(unlist(R0EG$estimates$EG$R))
}
#tb.hotspots$R0EG
hist(tb.hotspots$R0EG, br = 40)
tb.hotspots = filter(tb.hotspots, R0EG < 4.0 )
plot( tb.hotspots$R0EG ~ tb.hotspots$Lat )
text( tb.hotspots$Lat, tb.hotspots$R0EG, tb.hotspots$Admin2)
m = lm(tb.hotspots$R0EG  ~ tb.hotspots$Lat  )
abline(m, col='red')
m = lm(tb.hotspots$R0EG  ~ tb.hotspots$Lat  )
summary(m)
out = tb.hotspots[, names(tb.hotspots)[c(1:12, length(names(tb.hotspots)))]]
write_csv(out, path="canubelievethis.csv")
rm(list=ls())
library(tidyverse)
library(readr)
library(dplyr)
infile ="time_series_covid19_confirmed_US.csv"
tb = read_csv(infile)
head(tb)
dim(tb)
colnames(tb)[1:11]
colnames = names(tb)
#start = (1:length(tb[1,]))[colnames == "1/22/20"]  # beginning data
start = (1:length(tb[1,]))[colnames == "3/1/20"]
total.timepoints = length(tb[1,]) - start
start: total.timepoints
print( paste( "There are", total.timepoints  + 1, "time points"))
tb.sub = tb[, start: (start + total.timepoints)] # pick the actual data
#summary(tb.sub)
tb$totalcasesbyrow= apply(tb.sub, 1, sum)
hist(log10(tb$totalcasesbyrow))
qcutoff= quantile(tb$totalcasesbyrow, probs=c(0, 0.5,  0.75 ) )[3]
qcutoff
tb.hotspots = filter(tb, totalcasesbyrow >= qcutoff & Lat != 0)
nrow(tb.hotspots[,1])
#order(tb.q95$totalcasesbyrow)
tb.hotspots = tb.hotspots[ order(tb.hotspots$totalcasesbyrow, decreasing = TRUE) , ]
library(R0)
debug = 0
#for( i in 1:10){
for( i in 1:nrow(tb.hotspots[,1])){
x = as.vector(t(tb.hotspots[i, start:(start+total.timepoints)]))
if( debug > 0) {
print(paste("i=", i))
#print(x)
}
#str(x)
mGT= generation.time("gamma", c(3, 1.5))
R0EG = estimate.R(x, GT=mGT,  methods=c('EG'), pop.size = 100000, nsim=10 )
tb.hotspots$R0EG[i] = as.numeric(unlist(R0EG$estimates$EG$R))
}
#tb.hotspots$R0EG
hist(tb.hotspots$R0EG, br = 40)
tb.hotspots = filter(tb.hotspots, R0EG < 4.0 )
plot( tb.hotspots$R0EG ~ tb.hotspots$Lat )
text( tb.hotspots$Lat, tb.hotspots$R0EG, tb.hotspots$Admin2)
m = lm(tb.hotspots$R0EG  ~ tb.hotspots$Lat  )
abline(m, col='red')
m = lm(tb.hotspots$R0EG  ~ tb.hotspots$Lat  )
summary(m)
out = tb.hotspots[, names(tb.hotspots)[c(1:12, length(names(tb.hotspots)))]]
write_csv(out, path="canubelievethis.csv")
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-2))]]
ts1 = t(ts1)
row.names(ts1)
#day = parse_date(row.names(ts1), "%m/%d/%y")
data <- data.frame(
#day = as.Date("2017-06-14") - 0:364,
day = as.Date(row.names(ts1), "%m/%d/%y"),
cases = ts1
)
p <- ggplot(data, aes(x=day, y=cases)) + geom_line() + xlab("")
#p
p + scale_x_date(date_labels = "%Y %m %d")
rm(list=ls())
library(tidyverse)
library(readr)
library(dplyr)
infile ="time_series_covid19_confirmed_US.csv"
tb = read_csv(infile)
head(tb)
dim(tb)
colnames(tb)[1:11]
colnames = names(tb)
#start = (1:length(tb[1,]))[colnames == "1/22/20"]  # beginning data
start = (1:length(tb[1,]))[colnames == "3/1/20"]
total.timepoints = length(tb[1,]) - start
start: total.timepoints
print( paste( "There are", total.timepoints  + 1, "time points"))
tb.sub = tb[, start: (start + total.timepoints)] # pick the actual data
#summary(tb.sub)
tb$totalcasesbyrow= apply(tb.sub, 1, sum)
hist(log10(tb$totalcasesbyrow))
qcutoff= quantile(tb$totalcasesbyrow, probs=c(0, 0.5,  0.95 ) )[3]
qcutoff
tb.hotspots = filter(tb, totalcasesbyrow >= qcutoff & Lat != 0)
nrow(tb.hotspots[,1])
#order(tb.q95$totalcasesbyrow)
tb.hotspots = tb.hotspots[ order(tb.hotspots$totalcasesbyrow, decreasing = TRUE) , ]
library(R0)
debug = 0
#for( i in 1:10){
for( i in 1:nrow(tb.hotspots[,1])){
x = as.vector(t(tb.hotspots[i, start:(start+total.timepoints)]))
if( debug > 0) {
print(paste("i=", i))
#print(x)
}
#str(x)
mGT= generation.time("gamma", c(3, 1.5))
R0EG = estimate.R(x, GT=mGT,  methods=c('EG'), pop.size = 100000, nsim=10 )
tb.hotspots$R0EG[i] = as.numeric(unlist(R0EG$estimates$EG$R))
}
#tb.hotspots$R0EG
hist(tb.hotspots$R0EG, br = 40)
tb.hotspots = filter(tb.hotspots, R0EG < 4.0 )
plot( tb.hotspots$R0EG ~ tb.hotspots$Lat )
text( tb.hotspots$Lat, tb.hotspots$R0EG, tb.hotspots$Admin2)
m = lm(tb.hotspots$R0EG  ~ tb.hotspots$Lat  )
abline(m, col='red')
m = lm(tb.hotspots$R0EG  ~ tb.hotspots$Lat  )
summary(m)
out = tb.hotspots[, names(tb.hotspots)[c(1:12, length(names(tb.hotspots)))]]
write_csv(out, path="canubelievethis.csv")
ts1 = tb.hotspots[1, names(tb.hotspots)[c(13: (length(names(tb.hotspots))-2))]]
ts1 = t(ts1)
row.names(ts1)
#day = parse_date(row.names(ts1), "%m/%d/%y")
data <- data.frame(
#day = as.Date("2017-06-14") - 0:364,
day = as.Date(row.names(ts1), "%m/%d/%y"),
cases = ts1
)
View(data)
View(tb.hotspots)
p <- ggplot(data, aes(x=day, y=cases)) + geom_line() + xlab("")
#p
p + scale_x_date(date_labels = "%Y %m %d")
# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)
install.packages("hrbrthemes")
# Libraries
library(ggplot2)
library(dplyr)
library(hrbrthemes)
