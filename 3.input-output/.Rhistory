rm(list=ls())
list.files()
# colClass specify that all columns will be treated as characters for now.
# tb.ori = read.csv("metric_survey_data.csv", colClass=rep("character", 24))
tb.ori = read.csv("metric_survey_data.csv", stringsAsFactors = FALSE)
?str
str(tb.ori);
tb.ori$Timestamp
tb = tb.ori  #make a copy because we will modify the table.
names(tb.ori)
?names
#rename the columns with shortter names for convenience
names(tb) = c("time","gender", "age", "degree", "country", "light", "shaq", "fossil", "kilo", "mm",
"food","inseam", "weather","electronCharge","earlyHuman",
"laser", "continents", "antibiotics", "electronSize","earthCenter",
"religiousView","dailyLife","SciOnLife", "SciEffect")
str(tb)
summary(tb)
cbind (names(tb), substr(names(tb.ori), 1, 30))
?cbind
View(tb)
View(tb)
View(tb)
tb[,4]
tb[4,]
# dealing with missing values, add 'NA' to empty answers
# nested for-loops
for( i in 1:length(tb[, 1])) {  #outter for-loop, i for row, from 1 to the last row
for( j in 5:length(tb[1, ])) {  #inner for-loop, j for column, from 5th to the last column
# print( paste("i=", i, "j=", j) )
}
}
#if there is empty cell, we assign a missing value 'NA' there
for( i in 1:length(tb[, 1])) {  #outter for-loop
for( j in 5:length(tb[1, ])) {  #inner for-loop
if ( is.na(tb[i, j]) ) {
# do nothing
} else if (tb[i,j]=='') {
tb[i,j] = NA
}
}
}
summary(tb$age)
# dealing with missing values, add 'NA' to empty answers
# nested for-loops
for( i in 1:length(tb[, 1])) {  #outter for-loop, i for row, from 1 to the last row
for( j in 5:length(tb[1, ])) {  #inner for-loop, j for column, from 5th to the last column
# print( paste("i=", i, "j=", j) )
}
}
#if there is empty cell, we assign a missing value 'NA' there
for( i in 1:length(tb[, 1])) {  #outter for-loop
for( j in 5:length(tb[1, ])) {  #inner for-loop
if ( is.na(tb[i, j]) ) {
# do nothing
} else if (tb[i,j]=='') {
tb[i,j] = NA
}
}
}
table(tb$age)
# dealing with missing values, add 'NA' to empty answers
# nested for-loops
for( i in 1:length(tb[, 1])) {  #outter for-loop, i for row, from 1 to the last row
for( j in 5:length(tb[1, ])) {  #inner for-loop, j for column, from 5th to the last column
# print( paste("i=", i, "j=", j) )
}
}
#if there is empty cell, we assign a missing value 'NA' there
for( i in 1:length(tb[, 1])) {  #outter for-loop
for( j in 5:length(tb[1, ])) {  #inner for-loop
if ( is.na(tb[i, j]) ) {
# do nothing
} else if (tb[i,j]=='') {
tb[i,j] = NA
}
}
}
table(is.na(tb$age))
#indexing features of R
tb[1:5, 2:3]
tb$age #what does mean?
#tb$age[?] #try for 5th row in age
#correct some input errors
# If there is no input of 'age'
tb$age[is.na(tb$age)] = 'Do not wish to answer'
table(tb$age)
?table
# If there is no input of 'age'
tb$degree [is.na(tb$degree)] = 'Do not wish to answer'
table(tb$degree)
tb$gender[tb$gender=='']='Do not wish to answer'
table(tb$gender)
##### create a second table, convert character values to numerical values
tb2 = tb[ ,c(2,4,5)]  #this is the score table, empty space before comma indicate every row
head(tb2)
View(tb2)
tb2$age = NA
tb2$age = NA
tb2$age[grep("18-22", tb$age)] = 18/2 + 22/2
tb2$age[grep("23-30", tb$age)] = 23/2 + 30/2
tb2$age[grep("31-40", tb$age)] = 31/2 + 40/2
tb2$age[grep("41-50", tb$age)] = 41/2 + 50/2
tb2$age[grep("51-55", tb$age)] = 51/2 + 55/2
tb2$age[grep("56-60", tb$age)] = 56/2 + 60/2
#> grep("56-60", tb$age)
# [1]   6  12  84  88 104 112 129 130 131 132 133 156 162 163 185 216 219
tb2$age[grep("More than 60 years", tb$age)] = 65
View(tb2)
table(tb$age) #table is a very useful function (command) for tabulation
table(tb2$age)
table(tb$age) #table is a very useful function (command) for tabulation
table(tb2$age)
#summary(tb2$age)
boxplot( tb2$age ~ tb2$gender)
#histogram of age
hist(tb2$age)
table( tb$country )  #All the inputed 'countries'
tb2$country = 0  #for non-USA countries
View(tb2)
tb2$country[tb$country=='United States'] = 1
View(tb2)
#double-check the columns
names(tb2)
View(tb.ori)
View(tb)
tb2$mm=0
tb2$mm[ tb$mm==0.145 ] = 1
table(tb2$mm)
table(tb$mm)
tb2$mm=0
tb2$mm[ tb$mm==0.145 ] = 1
table(tb2$mm)
table(tb$mm)
tb2$shaq = 0
tb2$shaq[ tb$shaq=='Yes' ] = 1
tb2$shaq[ tb$shaq=='No' ] = 0
table(tb2$shaq)
tb2$kilo = 0
tb2$kilo[ tb$kilo=='1000 x' ] = 1
table(tb2$kilo)
tb2$mm=0
tb2$mm[ tb$mm==0.145 ] = 1
table(tb2$mm)
table(tb$mm)
tb2$inseam = 0
tb2$inseam[tb$inseam=="This person is short"] = 1
tb2$inseam[tb$inseam=="This person is tall"] = 0
table(tb2$inseam)
tb2$weather = 0
tb2$weather[tb$weather=="A Short sleeve shirt"] = 1
#tb2$weather[tb$weather=="A winter coat"] = 0
#tb2$weather[tb$weather=="A light jacket"] = 0
table(tb$weather)
table(tb2$weather)
View(tb2)
rm(list=ls())
list.files()
# colClass specify that all columns will be treated as characters for now.
# tb.ori = read.csv("metric_survey_data.csv", colClass=rep("character", 24))
tb.ori = read.csv("metric_survey_data.csv", stringsAsFactors = FALSE)
?str
str(tb.ori);
tb.ori$Timestamp
tb = tb.ori  #make a copy because we will modify the table.
names(tb.ori)
?names
#rename the columns with shortter names for convenience
names(tb) = c("time","gender", "age", "degree", "country", "light", "shaq", "fossil", "kilo", "mm",
"food","inseam", "weather","electronCharge","earlyHuman",
"laser", "continents", "antibiotics", "electronSize","earthCenter",
"religiousView","dailyLife","SciOnLife", "SciEffect")
str(tb)
summary(tb)
cbind (names(tb), substr(names(tb.ori), 1, 30))
?cbind
# dealing with missing values, add 'NA' to empty answers
# nested for-loops
for( i in 1:length(tb[, 1])) {  #outter for-loop, i for row, from 1 to the last row
for( j in 5:length(tb[1, ])) {  #inner for-loop, j for column, from 5th to the last column
# print( paste("i=", i, "j=", j) )
}
}
#if there is empty cell, we assign a missing value 'NA' there
for( i in 1:length(tb[, 1])) {  #outter for-loop
for( j in 5:length(tb[1, ])) {  #inner for-loop
if ( is.na(tb[i, j]) ) {
# do nothing
} else if (tb[i,j]=='') {
tb[i,j] = NA
}
}
}
table(is.na(tb$age))
#indexing features of R
tb[1:5, 2:3]
tb$age #what does mean?
#tb$age[?] #try for 5th row in age
#correct some input errors
# If there is no input of 'age'
tb$age[is.na(tb$age)] = 'Do not wish to answer'
table(tb$age)
?table
# If there is no input of 'age'
tb$degree [is.na(tb$degree)] = 'Do not wish to answer'
table(tb$degree)
tb$gender[tb$gender=='']='Do not wish to answer'
table(tb$gender)
##### create a second table, convert character values to numerical values
tb2 = tb[ ,c(2,4,5)]  #this is the score table, empty space before comma indicate every row
head(tb2)
#calculate the average age for each category
?grep #This is not GRE prep. This is pattern match.
# grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,
#     fixed = FALSE, useBytes = FALSE, invert = FALSE)
tb2$age = NA
tb2$age[grep("18-22", tb$age)] = 18/2 + 22/2
tb2$age[grep("23-30", tb$age)] = 23/2 + 30/2
tb2$age[grep("31-40", tb$age)] = 31/2 + 40/2
tb2$age[grep("41-50", tb$age)] = 41/2 + 50/2
tb2$age[grep("51-55", tb$age)] = 51/2 + 55/2
tb2$age[grep("56-60", tb$age)] = 56/2 + 60/2
#> grep("56-60", tb$age)
# [1]   6  12  84  88 104 112 129 130 131 132 133 156 162 163 185 216 219
tb2$age[grep("More than 60 years", tb$age)] = 65
table(tb$age) #table is a very useful function (command) for tabulation
table(tb2$age)
#summary(tb2$age)
table(tb2$age, tb2$gender)
boxplot( tb2$age ~ tb2$gender)
#histogram of age
hist(tb2$age)
table( tb$country )  #All the inputed 'countries'
tb2$country = 0  #for non-USA countries
tb2$country[tb$country=='United States'] = 1
table( tb2$country )
#have a look at some entries
head(tb2)
#double-check the columns
names(tb2)
### Here are the columns for the 3 categories
metrics = c("shaq", "kilo", "mm", "inseam", "weather")
sciLiteracy = c("light", "fossil", "food", "electronCharge",
"earlyHuman", "laser", "continents", "antibiotics",
"electronSize", "earthCenter")
sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
tb2$shaq = 0
tb2$shaq[ tb$shaq=='Yes' ] = 1
tb2$shaq[ tb$shaq=='No' ] = 0
table(tb2$shaq)
tb2$kilo = 0
tb2$kilo[ tb$kilo=='1000 x' ] = 1
table(tb2$kilo)
tb2$mm=0
tb2$mm[ tb$mm==0.145 ] = 1
table(tb2$mm)
table(tb$mm)
tb2$inseam = 0
tb2$inseam[tb$inseam=="This person is short"] = 1
tb2$inseam[tb$inseam=="This person is tall"] = 0
table(tb2$inseam)
tb2$weather = 0
tb2$weather[tb$weather=="A Short sleeve shirt"] = 1
#tb2$weather[tb$weather=="A winter coat"] = 0
#tb2$weather[tb$weather=="A light jacket"] = 0
table(tb$weather)
table(tb2$weather)
View(tb2)
tb2$metric = apply( tb2[ , metrics], MARGIN=1, FUN=sum )
View(tb2)
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
# metric total score
tb2$metric = apply( tb2[ , metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=4)
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
# metric total score
print(paste("metrics are", meterics));
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
# metric total score
print(paste("metrics are", metrics));
tb2$metric = apply( tb2[ , metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=4)
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
# metric total score
print(paste("metrics are: ", metrics));
tb2$metric = apply( tb2[ , metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=4)
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
# metric total score
print(paste("metrics are: ", metrics));
tb2$metric = apply( tb2[ , metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=5, probability = TRUE )
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
# metric total score
print(paste("metrics are: ", metrics));
tb2$metric = apply( tb2[ , metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=6, probability = TRUE )
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
# metric total score
print(paste("metrics are: ", metrics));
tb2$metric = apply( tb2[ , metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=5, probability = TRUE )
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
# metric total score
print(paste("metrics are: ", metrics));
tb2$metric = apply( tb2[ , metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=5 )
#hist(tb2$metric, br=5, probability = TRUE )
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
# metric total score
print(paste("metrics are: ", metrics));
tb2$metric = apply( tb2[ , metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=5 )
plot( density(tb2$metric) )
#hist(tb2$metric, br=5, probability = TRUE )
View(tb2)
rm(list=ls())
list.files()
# colClass specify that all columns will be treated as characters for now.
# tb.ori = read.csv("metric_survey_data.csv", colClass=rep("character", 24))
tb.ori = read.csv("metric_survey_data.csv", stringsAsFactors = FALSE)
?str
str(tb.ori);
tb.ori$Timestamp
tb = tb.ori  #make a copy because we will modify the table.
names(tb.ori)
?names
#rename the columns with shortter names for convenience
names(tb) = c("time","gender", "age", "degree", "country", "light", "shaq", "fossil", "kilo", "mm",
"food","inseam", "weather","electronCharge","earlyHuman",
"laser", "continents", "antibiotics", "electronSize","earthCenter",
"religiousView","dailyLife","SciOnLife", "SciEffect")
str(tb)
summary(tb)
cbind (names(tb), substr(names(tb.ori), 1, 30))
?cbind
# dealing with missing values, add 'NA' to empty answers
# nested for-loops
for( i in 1:length(tb[, 1])) {  #outter for-loop, i for row, from 1 to the last row
for( j in 5:length(tb[1, ])) {  #inner for-loop, j for column, from 5th to the last column
# print( paste("i=", i, "j=", j) )
}
}
#if there is empty cell, we assign a missing value 'NA' there
for( i in 1:length(tb[, 1])) {  #outter for-loop
for( j in 5:length(tb[1, ])) {  #inner for-loop
if ( is.na(tb[i, j]) ) {
# do nothing
} else if (tb[i,j]=='') {
tb[i,j] = NA
}
}
}
table(is.na(tb$age))
#indexing features of R
tb[1:5, 2:3]
tb$age #what does mean?
#tb$age[?] #try for 5th row in age
#correct some input errors
# If there is no input of 'age'
tb$age[is.na(tb$age)] = 'Do not wish to answer'
table(tb$age)
?table
# If there is no input of 'age'
tb$degree [is.na(tb$degree)] = 'Do not wish to answer'
table(tb$degree)
tb$gender[tb$gender=='']='Do not wish to answer'
table(tb$gender)
##### create a second table, convert character values to numerical values
tb2 = tb[ ,c(2,4,5)]  #this is the score table, empty space before comma indicate every row
head(tb2)
#calculate the average age for each category
?grep #This is not GRE prep. This is pattern match.
# grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,
#     fixed = FALSE, useBytes = FALSE, invert = FALSE)
tb2$age = NA
tb2$age[grep("18-22", tb$age)] = 18/2 + 22/2
tb2$age[grep("23-30", tb$age)] = 23/2 + 30/2
tb2$age[grep("31-40", tb$age)] = 31/2 + 40/2
tb2$age[grep("41-50", tb$age)] = 41/2 + 50/2
tb2$age[grep("51-55", tb$age)] = 51/2 + 55/2
tb2$age[grep("56-60", tb$age)] = 56/2 + 60/2
#> grep("56-60", tb$age)
# [1]   6  12  84  88 104 112 129 130 131 132 133 156 162 163 185 216 219
tb2$age[grep("More than 60 years", tb$age)] = 65
table(tb$age) #table is a very useful function (command) for tabulation
table(tb2$age)
#summary(tb2$age)
table(tb2$age, tb2$gender)
boxplot( tb2$age ~ tb2$gender)
#histogram of age
hist(tb2$age)
table( tb$country )  #All the inputed 'countries'
tb2$country = 0  #for non-USA countries
tb2$country[tb$country=='United States'] = 1
table( tb2$country )
#have a look at some entries
head(tb2)
#double-check the columns
names(tb2)
### Here are the columns for the 3 categories
metrics = c("shaq", "kilo", "mm", "inseam", "weather")
sciLiteracy = c("light", "fossil", "food", "electronCharge",
"earlyHuman", "laser", "continents", "antibiotics",
"electronSize", "earthCenter")
sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
tb2$shaq = 0
tb2$shaq[ tb$shaq=='Yes' ] = 1
tb2$shaq[ tb$shaq=='No' ] = 0
table(tb2$shaq)
tb2$kilo = 0
tb2$kilo[ tb$kilo=='1000 x' ] = 1
table(tb2$kilo)
tb2$mm=0
tb2$mm[ tb$mm==0.145 ] = 1
table(tb2$mm)
table(tb$mm)
tb2$inseam = 0
tb2$inseam[tb$inseam=="This person is short"] = 1
tb2$inseam[tb$inseam=="This person is tall"] = 0
table(tb2$inseam)
tb2$weather = 0
tb2$weather[tb$weather=="A Short sleeve shirt"] = 1
#tb2$weather[tb$weather=="A winter coat"] = 0
#tb2$weather[tb$weather=="A light jacket"] = 0
table(tb$weather)
table(tb2$weather)
# metrics = c("shaq", "kilo", "mm", "inseam", "weather")
# metric total score
print(paste("metrics are: ", metrics));
tb2$metric = apply( tb2[ , metrics], MARGIN=1, FUN=sum )
hist(tb2$metric, br=5 )
plot( density(tb2$metric) )
#hist(tb2$metric, br=5, probability = TRUE )
#sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
# "My religious views are more important than scientific views
tb2$religiousView = 0
tb2$religiousView[grep("No", tb$religiousView)] = 1
tb2$religiousView[grep("Yes", tb$religiousView)] = 0
table(tb2$religiousView)
table(tb$religiousView)
# "For me, in my daily life, it is not important to know about science"
tb2$dailyLife = 0
tb2$dailyLife[ tb$dailyLife=='TRUE' ] = 0
tb2$dailyLife[ tb$dailyLife=='FALSE' ] = 1
table(tb2$dailyLife)
# "Science and technology are making our lives healthiers, easiers and more comfortable."
tb2$SciOnLife = 0
tb2$SciOnLife[ tb$SciOnLife=='TRUE' ] = 1
tb2$SciOnLife[ tb$SciOnLife=='FALSE' ] = 0
table(tb2$SciOnLife)
# "The benefits of sciences are greaters than any harmful effects that it may have."
tb2$SciEffect = 0
tb2$SciEffect[ tb$SciEffect=='TRUE' ] = 1
tb2$SciEffect[ tb$SciEffect=='FALSE' ] = 0
table( tb2$SciEffect )
#sciAttitude = c("religiousView", "dailyLife", "SciOnLife", "SciEffect")
#Attitude total score
tb2$SciAttitude = apply( tb2[, sciAttitude], MARGIN=1, FUN=sum)
hist(tb2$SciAttitude, br=20)
head(tb2)
summary( lm ( tb2$religiousView ~ tb2$dailyLife))
?jitter
summary( lm ( tb2$religiousView ~ tb2$dailyLife))
plot( jitter(tb2$religiousView) ~ jitter(tb2$dailyLife))
m =  lm ( tb2$religiousView ~ tb2$dailyLife)
summary( m )
plot( jitter(tb2$religiousView) ~ jitter(tb2$dailyLife))
abline(m, col="red")
m =  lm ( tb2$religiousView ~ tb2$dailyLife)
summary( m )
#plot( jitter(tb2$religiousView) ~ jitter(tb2$dailyLife))
plot( tb2$religiousView  ~ tb2$dailyLife )
abline(m, col="red")
m =  lm ( tb2$religiousView ~ tb2$dailyLife)
summary( m )
plot( jitter(tb2$religiousView) ~ jitter(tb2$dailyLife))
plot( tb2$religiousView  ~ tb2$dailyLife )
abline(m, col="red")
m =  lm ( tb2$religiousView ~ tb2$dailyLife)
summary( m )
plot( jitter(tb2$religiousView) ~ jitter(tb2$dailyLife))
abline(m, col="red")
plot( tb2$religiousView  ~ tb2$dailyLife )
abline(m, col="red")
m =  lm ( tb2$religiousView ~ tb2$dailyLife)
summary( m )
plot( jitter(tb2$religiousView) ~ jitter(tb2$dailyLife))
abline(m, col="red")
plot( tb2$religiousView  ~ tb2$dailyLife )
abline(m, col="red")
View(tb2)
m =  lm ( tb2$religiousView ~ tb2$dailyLife)
summary( m )
plot( jitter(tb2$religiousView) ~ jitter(tb2$dailyLife))
abline(m, col="red")
plot( tb2$religiousView  ~ tb2$dailyLife )
abline(m, col="red")
table(tb2$religiousView ,  tb2$dailyLife )
RVTable =  table(tb2$religiousView ,  tb2$dailyLife )
str(RVTable)
RVTable =  as.matrix( table(tb2$religiousView ,  tb2$dailyLife ) )
str(RVTable)
RVTable =  as.matrix( table(tb2$religiousView ,  tb2$dailyLife ) )
str(RVTable)
RVTable =  as.matrix( table(tb2$religiousView ,  tb2$dailyLife ) )
str(RVTable)
fisher.test(RVTable)
table(tb2$religiousView ,  tb2$dailyLife )
RVTable =  as.matrix( table(tb2$religiousView ,  tb2$dailyLife ) )
str(RVTable)
fisher.test(RVTable)
