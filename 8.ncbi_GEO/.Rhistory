head(ncbifd)
str(ncbifd)
str(tT)
class(ex)
head(ex)
str(gset)
library(GEOquery)
#gset <- getGEO("GSE3821", GSEMatrix =TRUE)
gset <- getGEO("GDS2347", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
str(gset)
gset <- getGEO("GSE3635", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset) #This is the expression matrix
head(ex)
str(gset)
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for ID and ORF
ORFs = unique(as.character(dictionary$ORF))
ex2 = ex[match(ORFs, dictionary$ORF), ]
rownames(ex2) = ORFs
head(ex2) #Now, expression matrix is named by ORFs
str(ex2)
ex3 = ex2
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NaN
hist(ex3[,1], br=100)
ex4=ex3
myVar = apply( ex4, 1, FUN=var)
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=mean)
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
write.csv(myarray, "GSE3821_log2CV.csv", row.names=F)
test = read.csv("GSE3821_log2CV.csv", colClasses = c('character', NA, NA, NA))
str(test)
hist(test$myCV, br=100)
hist(test$myStddev, br=100)
hist(test$myMean, br=100)
hist(test$myCV, br=100)
hist(test$myCV, br=100, xlim=c(-10,10))
hist(test$myCV, br=100, xlim=c(-100,100))
hist(test$myCV, br=100, xlim=c(-1000,1000))
require(GEOquery)
gset <- getGEO("GSE3821", GSEMatrix =TRUE)
gset <- getGEO("GSE3821", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset) #This is the expression matrix
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for ID and ORF
#########
# A simple approach to create an expression matrix with ORFs as row names
# This approach takes only one probe for each ORFs, which is often true for cDNA arrays
ORFs = unique(as.character(dictionary$ORF))
ex2 = ex[match(ORFs, dictionary$ORF), ]
rownames(ex2) = ORFs
head(ex2) #Now, expression matrix is named by ORFs
##########
#Another approach is to calculate the average sigals for all the probes in the same ORFs
multipleORFs = NA;
ex3 = ex2 #This is just a template
# orf = 'YLR331C'
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleORFs = c(multipleORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
}
multipleORFs = multipleORFs[-1]
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NaN
myVar = apply( ex4, 1, FUN=var)
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=mean)
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
write.csv(myarray, "GSE3821_log2CV.csv", row.names=F)
test = read.csv("GSE3821_log2CV.csv", colClasses = c('character', NA, NA, NA))
str(test)
hist(test$myCV, br=100)
#2012 Nov 1
rm(list=ls())
#library(Biobase)
require(GEOquery)
#http://www.ncbi.nlm.nih.gov/geo/browse/
#GSE20444  GSE27222  GSE4295   http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GPL2529
gset <- getGEO("GSE3821", GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset) #This is the expression matrix
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for ID and ORF
#########
# A simple approach to create an expression matrix with ORFs as row names
# This approach takes only one probe for each ORFs, which is often true for cDNA arrays
ORFs = unique(as.character(dictionary$ORF))
ex2 = ex[match(ORFs, dictionary$ORF), ]
rownames(ex2) = ORFs
head(ex2) #Now, expression matrix is named by ORFs
##########
#Another approach is to calculate the average sigals for all the probes in the same ORFs
multipleORFs = NA;
ex3 = ex2 #This is just a template
# orf = 'YLR331C'
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleORFs = c(multipleORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
}
multipleORFs = multipleORFs[-1]
######
#normalizaion .
colSums = aplly(ex3, 2, sum)
colSums = apply(ex3, 2, sum)
colSums
var(colSums)
max(colSums)
summary(colSums)
head(ex3)
colSum/1E6
colSums/1E6
colSums = apply(ex3, 2, sum)
colSums/1E6
ex3norm = apply( ex3, 2, function(x){ sum(x) / max(colSums) } )
apply(ex3norm, 2, sum)
ex3norm
ex3norm = apply( ex3, 2, function(x){ max(colSums) / sum(x) } )
ex3norm
colSums
colSums / 1E6
max(colSums)
colSums = apply(ex3, 2, sum)
colSums/1E6
norms = apply( ex3, 2, function(x){ max(colSums) / sum(x) } )
norms
ex3norm = ex3
for( col in 1:length(ex3[1,])) {
ex3norm[,col] = ex3[,col] * max(colSums) / sum(ex3[,col])
}
apply(ex3norm, 2, sum)
apply(ex3norm, 2, sum) / 1E6
apply(ex3norm, 2, sum) / max(colSums)
#########
# now, have a look at the signals
hist(ex3[,1], br=100)
#########
# now, have a look at the signals
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NaN
#############
#calculate coefficient of variation
myVar = apply( ex4, 1, FUN=var)
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=mean)
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
write.csv(myarray, "GSE3821_log2CV.csv", row.names=F)
test = read.csv("GSE3821_log2CV.csv", colClasses = c('character', NA, NA, NA))
str(test)
hist(test$myCV, br=100)
hist(test$myStddev, br=100)
hist(test$myMean, br=100)
head(test)
#calculate coefficient of variation
myVar = apply( ex4, 1, FUN=function(x){var(x, na.rm=T))
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=function(x){mean(x, na.rm=T)})
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
myVar = apply( ex4, 1, FUN=function(x){var(x, na.rm=T)})
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=function(x){mean(x, na.rm=T)})
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
head(myarray)
str(myarray)
write.csv(myarray, "GSE3821_log2CV.csv", row.names=F)
test = read.csv("GSE3821_log2CV.csv", colClasses = c('character', NA, NA, NA))
str(test)
hist(test$myCV, br=100)
hist(test$myStddev, br=100)
hist(test$myMean, br=100)
head(test)
summary(test)
summary(myarray)
?grep
str(ORFs)
grep("^Y*", ORFs)
x = grep("^Y*", ORFs)
summary(x)
ORFs[1:100]
ORFs[6000:7000]
ORFs = unique(as.character(dictionary$ORF))
yORFs = ORFs[grep("^Y\w+\d{3}\w+", ORFs)]
yORFs = ORFs[grep("^Y*\d{3}*", ORFs)]
yORFs = ORFs[grep("^Y*", ORFs)]
str(yORFs)
str(ORFs)
yORFs = ORFs[grep( ^Y*\d*.*, ORFs, perl=T)]
yORFs = ORFs[grep( "^Y*\d*.*", ORFs, perl=T)]
yORFs = ORFs[grep( "^Y*\\d*.*", ORFs, perl=T)]
str(yORFs)
str(ORFs)
yORFs = ORFs[grep( "^Y*\\d{3}.*", ORFs, perl=T)]
str(yORFs)
yORFs = ORFs[grep( "^Y*\\d+.*", ORFs, perl=T)]
str(yORFs)
yORFs = ORFs[grep( "Y\\w{2}\\d{3}.*", ORFs, perl=T)]
str(yORFs)
yORFs = ORFs[grep( "Y\\w{2}\\d{3}.*", ORFs)]
str(yORFs)
?set.diff
?diff.set
?union
setdiff(ORFs, yORFs)
ORFs = yORFs
ex2 = ex[match(ORFs, dictionary$ORF), ]
rownames(ex2) = ORFs
head(ex2) #Now, expression matrix is named by ORFs
#Another approach is to calculate the average sigals for all the probes in the same ORFs
multipleORFs = NA;
ex3 = ex2 #This is just a template
# orf = 'YLR331C'
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleORFs = c(multipleORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
}
multipleORFs = multipleORFs[-1]
colSums = apply(ex3, 2, sum)
colSums/1E6
ex3norm = ex3
for( col in 1:length(ex3[1,])) {
ex3norm[,col] = ex3[,col] * max(colSums) / sum(ex3[,col])
}
apply(ex3norm, 2, sum) / max(colSums)
ex3 = ex3norm
#########
# now, have a look at the signals
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NA
#############
#calculate coefficient of variation
myVar = apply( ex4, 1, FUN=function(x){var(x, na.rm=T)})
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=function(x){mean(x, na.rm=T)})
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
summary(myarray)
gset <- getGEO("GSE3821", GSEMatrix =TRUE)
gset <- gset[[idx]]
ex <- exprs(gset) #This is the expression matrix
str(ex)
head(ex)
str(gset)
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for probe ID and ORF
ORFs = unique(as.character(dictionary$ORF))
str(ORFs)
yORFs = ORFs[grep( "Y\\w{2}\\d{3}.*", ORFs)]  #these are yeast ORFs
str(yORFs)
setdiff(ORFs, yORFs)
ORFs = yORFs
str(ex)
ex2 = ex[match(ORFs, dictionary$ORF), ]
str(ex2)
rownames(ex2) = ORFs
head(ex2) #Now, expression matrix is named by ORFs
multipleORFs = NA;
ex3 = ex2 #This is just a template
orf = 'YLR331C'
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
myrows
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleORFs = c(multipleORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
}
multipleORFs
multipleORFs = multipleORFs[-1]
colSums = apply(ex3, 2, sum)
colSums
colSums/1E6
ex3norm = ex3
for( col in 1:length(ex3[1,])) {
ex3norm[,col] = ex3[,col] * max(colSums) / sum(ex3[,col])
}
apply(ex3norm, 2, sum) / max(colSums)
ex3 = ex3norm
hist(ex3[,1], br=100)
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NA
myVar = apply( ex4, 1, FUN=function(x){var(x, na.rm=T)})
head(myVar)
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=function(x){mean(x, na.rm=T)})
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
head(myarray)
myarray = myarray[, c(4, 1:3)]
summary(myarray)
write.csv(myarray, "GSE3821_log2CV.csv", row.names=F)
test = read.csv("GSE3821_log2CV.csv", colClasses = c('character', NA, NA, NA))
str(test)
hist(test$myCV, br=100)
hist(test$myStddev, br=100)
hist(test$myMean, br=100)
outfilename = paste(myGSE, "_log2CV.csv", sep='')
myGSE="xxx"
outfilename = paste(myGSE, "_log2CV.csv", sep='')
outfilename
#2012 Nov 2
rm(list=ls())
require(GEOquery)
#http://www.ncbi.nlm.nih.gov/geo/browse/
#GEO2R
#myGSE = "GSE3821" # qin, demo
#myGSE = "GSE7645" #jessica coates
#myGSE = "GSE9514" #teneisha
#myGSE = "GSE8536" #Ellah
#myGSE = "GSE33276" #Asha
myGSEs = c("GSE3821", "GSE7645", "GSE9514", "GSE8536", "GSE33276" )
for ( myGSE in myGSEs ) {
gset <- getGEO(myGSE, GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset) #This is the expression matrix
#########
# Find out probes and ORFs
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for probe ID and ORF
ORFs = unique(as.character(dictionary$ORF))
yORFs = ORFs[grep( "Y\\w{2}\\d{3}.*", ORFs)]  #these are yeast ORFs
str(yORFs)
setdiff(ORFs, yORFs)
ORFs = yORFs
#########
# A simple approach to create an expression matrix with ORFs as row names
# This approach takes only one probe for each ORFs, which is often true for cDNA arrays
ex2 = ex[match(ORFs, dictionary$ORF), ]
rownames(ex2) = ORFs
head(ex2) #Now, expression matrix is named by ORFs
##########
#Another approach is to calculate the average sigals for all the probes in the same ORFs
multipleORFs = NA;
ex3 = ex2 #This is just a template
# orf = 'YLR331C'
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleORFs = c(multipleORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
}
multipleORFs = multipleORFs[-1]
######
#normalizaion
colSums = apply(ex3, 2, sum)
colSums/1E6
ex3norm = ex3
for( col in 1:length(ex3[1,])) {
ex3norm[,col] = ex3[,col] * max(colSums) / sum(ex3[,col])
}
apply(ex3norm, 2, sum) / max(colSums)
ex3 = ex3norm
#########
# now, have a look at the signals
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NA #remove backgrounds
#############
#calculate coefficient of variation
myVar = apply( ex4, 1, FUN=function(x){var(x, na.rm=T)})
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=function(x){mean(x, na.rm=T)})
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
summary(myarray)
outfilename = paste(myGSE, "_log2CV.csv", sep='')
write.csv(myarray, outfile, row.names=F)
test = read.csv( outfile, colClasses = c('character', NA, NA, NA))
str(test)
hist(test$myCV, br=100)
hist(test$myStddev, br=100)
hist(test$myMean, br=100)
} #end of myGSEs loop
#2012 Nov 2
rm(list=ls())
require(GEOquery)
#http://www.ncbi.nlm.nih.gov/geo/browse/
#GEO2R
#myGSE = "GSE3821" # qin, demo
#myGSE = "GSE7645" #jessica coates
#myGSE = "GSE9514" #teneisha
#myGSE = "GSE8536" #Ellah
#myGSE = "GSE33276" #Asha
myGSEs = c("GSE3821", "GSE7645", "GSE9514", "GSE8536", "GSE33276" )
for ( myGSE in myGSEs ) {
gset <- getGEO(myGSE, GSEMatrix =TRUE)
if (length(gset) > 1) idx <- grep("GPL90", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset) #This is the expression matrix
#########
# Find out probes and ORFs
dictionary = gset@featureData@data[, c('ID', 'ORF')]  #This is a lookup table for probe ID and ORF
ORFs = unique(as.character(dictionary$ORF))
yORFs = ORFs[grep( "Y\\w{2}\\d{3}.*", ORFs)]  #these are yeast ORFs
str(yORFs)
setdiff(ORFs, yORFs)
ORFs = yORFs
#########
# A simple approach to create an expression matrix with ORFs as row names
# This approach takes only one probe for each ORFs, which is often true for cDNA arrays
ex2 = ex[match(ORFs, dictionary$ORF), ]
rownames(ex2) = ORFs
head(ex2) #Now, expression matrix is named by ORFs
##########
#Another approach is to calculate the average sigals for all the probes in the same ORFs
multipleORFs = NA;
ex3 = ex2 #This is just a template
# orf = 'YLR331C'
for (orf in ORFs) {
myrows = as.character( dictionary$ID[dictionary$ORF==orf] )
if (length(myrows) > 1) {
print (orf)
multipleORFs = c(multipleORFs, orf)
ex[myrows, ] = apply(ex[myrows,], 2, mean)
}else {
ex3[orf, ] = ex[myrows[1], ]
}
}
multipleORFs = multipleORFs[-1]
######
#normalizaion
colSums = apply(ex3, 2, sum)
colSums/1E6
ex3norm = ex3
for( col in 1:length(ex3[1,])) {
ex3norm[,col] = ex3[,col] * max(colSums) / sum(ex3[,col])
}
apply(ex3norm, 2, sum) / max(colSums)
ex3 = ex3norm
#########
# now, have a look at the signals
hist(ex3[,1], br=100)
ex4 = log2(ex3)
hist(ex4[,3])
ex4[ex4<0] = NA #remove backgrounds
#############
#calculate coefficient of variation
myVar = apply( ex4, 1, FUN=function(x){var(x, na.rm=T)})
myStddev = sqrt(myVar)
myMean = apply( ex4, 1, FUN=function(x){mean(x, na.rm=T)})
myCV = myStddev / myMean
myarray= data.frame(cbind( myStddev, myMean, myCV))
myarray$ORF = ORFs
myarray = myarray[, c(4, 1:3)]
summary(myarray)
outfilename = paste(myGSE, "_log2CV.csv", sep='')
write.csv(myarray, outfilename, row.names=F)
test = read.csv( outfilename, colClasses = c('character', NA, NA, NA))
str(test)
hist(test$myCV, br=100)
hist(test$myStddev, br=100)
hist(test$myMean, br=100)
} #end of myGSEs loop
