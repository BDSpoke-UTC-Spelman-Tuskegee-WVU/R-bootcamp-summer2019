FWs = c(58.44, 74.5513, 84.997, 40)
names(FWs) = c('NaCl', 'KCl', 'NaNO3', 'NaOH');
FW = FWs[formula]
FW * conc * vol / 10^6
}
molar_solution3( 100, 500, 'NaCl' ) #100mM 500ML NaCl
molar_solution3 <- function( conc, vol, formula) {
FWs = c(58.44, 74.5513, 84.997, 40)
names(FWs) = c('NaCl', 'KCl', 'NaNO3', 'NaOH');
FW = FWs[formula]
FW * conc * vol / 10^6
}
molar_solution3( 100, 500, 'NaCl' ) #100mM 500ML NaCl
molar_solution3( 100, 500, 'NaOH' ) #100mM 500ML NaOH
molar_solution( 1, 100)
molar_solution2( 1, 100, 58.44)
molar_solution3( 100, 1000, 'NaNO3' )
molar_solution2( 100, 1000, 74.5513) #for Kcl
molar_solution3( 1000, 1000, 'NaCl' )
molar_solution <- function( x, y) {
return( 58.433 * (x/10^3) * (y/10^3) ) #in R by default, last line results are returned.
}
molar_solution(100, 500) #100mM 500mL NaCl
molar_solution <- function( x, y) {
58.433 * (x/10^3) * (y/10^3)  #in R by default, last line results are returned.
}
molar_solution(100, 500) #100mM 500mL NaCl
rm(list=ls()) #clearn my workspace
tb = read.csv("Carlson_Yeast.csv");
View(tb)
plot( tb$Amount ~ tb$Hours );
plot( Amount ~ Hours, data=tb );
plot( Amount ~ Hours, data=tb, type="b",
main="Carlson growth curve" );
##### the second data set, multiple plots
tb2 = read.csv( "Carlson2.csv" );
##first try, not pretty
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",
main="growth comparison");
lines( tb2$Amount2 ~ tb2$Hours );
View(tb2)
View(tb2)
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",  lty=2,
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red", lwd=5 );
##add legends
#legend(2,500,c("Amount","Amount2"), col=c("blue","red"), lwd=c(1,1) )
#legend(12,250        ,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1) )
#legend("bottomright", c("Amount, second amount"))
#legend('bottomright',500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1))
legend(("bottomright"), c("WT", "MUT"), col=c("Blue","Red"),lwd=c(1,5), lty=c(2,1))
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",  lty=2,
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red", lwd=5 );
##add legends
#legend(2,500,c("Amount","Amount2"), col=c("blue","red"), lwd=c(1,1) )
#legend(12,250        ,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1) )
#legend("bottomright", c("Amount, second amount"))
#legend('bottomright',500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1))
legend(("bottomright"), c("WT", "MUT"), col=c("Blue","Red"),lwd=c(1,5), lty=c(1,2))
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",  lty=2,
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red", lwd=5 );
##add legends
#legend(2,500,c("Amount","Amount2"), col=c("blue","red"), lwd=c(1,1) )
#legend(12,250        ,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1) )
#legend("bottomright", c("Amount, second amount"))
#legend('bottomright',500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1))
legend(("bottomright"), c("WT", "MUT"), col=c("Blue","Red"),lwd=c(1,1), lty=c(1,2))
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",  lty=2,
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red", lwd=1 );
##add legends
#legend(2,500,c("Amount","Amount2"), col=c("blue","red"), lwd=c(1,1) )
#legend(12,250        ,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1) )
#legend("bottomright", c("Amount, second amount"))
#legend('bottomright',500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1))
legend(("bottomright"), c("WT", "MUT"), col=c("Blue","Red"),lwd=c(1,1), lty=c(1,2))
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",  lty=2,
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red", lwd=1 );
##add legends
#legend(2,500,c("Amount","Amount2"), col=c("blue","red"), lwd=c(1,1) )
#legend(12,250        ,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1) )
#legend("bottomright", c("Amount, second amount"))
#legend('bottomright',500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1))
legend(("bottomright"), c("WT", "MUT"), col=c("Blue","Red"),lwd=c(1,1), lty=c(2,1))
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",  lty=2,
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red", lwd=1 );
##add legends
#legend(2,500,c("Amount","Amount2"), col=c("blue","red"), lwd=c(1,1) )
legend(12,250        ,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1) )
#legend("bottomright", c("Amount, second amount"))
#legend('bottomright',500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1))
#legend(("bottomright"), c("WT", "MUT"), col=c("Blue","Red"),lwd=c(1,1), lty=c(2,1))
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",  lty=2,
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red", lwd=1 );
##add legends
#legend(2,500,c("Amount","Amount2"), col=c("blue","red"), lwd=c(1,1) )
legend(12,250        ,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1), lty=c(2,1) )
#legend("bottomright", c("Amount, second amount"))
#legend('bottomright',500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1))
#legend(("bottomright"), c("WT", "MUT"), col=c("Blue","Red"),lwd=c(1,1), lty=c(2,1))
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",  lty=2,
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red", lwd=1 );
##add legends
#legend(2,500,c("Amount","Amount2"), col=c("blue","red"), lwd=c(1,1) )
#legend(12,250        ,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1), lty=c(2,1) )
#legend("bottomright", c("Amount, second amount"))
#legend('bottomright',500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1))
legend(("bottomright"), c("WT", "MUT"), col=c("Blue","Red"),lwd=c(1,1), lty=c(2,1))
##now, let's add colors
plot( tb2$Amount ~ tb2$Hours, ylab="Amount",xlab="Hours",type="l",  lty=2, ylim=c(-100, 1000),
main="growth comparison", col="blue");
lines( tb2$Amount2 ~ tb2$Hours, col="red", lwd=1 );
##add legends
#legend(2,500,c("Amount","Amount2"), col=c("blue","red"), lwd=c(1,1) )
#legend(12,250        ,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1), lty=c(2,1) )
#legend("bottomright", c("Amount, second amount"))
#legend('bottomright',500,c("wt","mutant"), col=c("blue","red"), lwd=c(1,1))
legend(("bottomright"), c("WT", "MUT"), col=c("Blue","Red"),lwd=c(1,1), lty=c(2,1))
x = 1:127
y = 1:127
plot( y ~x, pch=x)
##### plot sunflower seed data
sunflower = read.csv("SunflowerSeedData.csv");
plot( sunflower$Stripes ~ sunflower$Seeds, ylab="Stripes"
, xlab="Seeds", main="sunflower data", type="b"
, col="red"
)
View(sunflower)
##### plot sunflower seed data
sunflower = read.csv("SunflowerSeedData.csv");
plot( sunflower$Stripes ~ sunflower$Seeds, ylab="Stripes"
, xlab="Seeds", main="sunflower data", type="b"
, col="red"
)
x= seq(1:30)
y= x^2;
write.csv(x, "x.csv", row.names=F)
write.csv(y, "y.csv", row.names=F)
output = cbind(x, y)
write.csv(output, "xy-20190530.csv", row.names=F)
plot( y ~ x, pch=x )
?cbind
View(output)
View(output)
x= seq(1:30)
y= x^2;
write.csv(x, "x.csv", row.names=F)
write.csv(y, "y.csv", row.names=F)
output = cbind(x, y)
write.csv(output, "xy-20210518.csv", row.names=F)
plot( y ~ x, pch=x )
?write.table
x= seq(1:30)
y= x^2;
write.csv(x, "x.csv", row.names=F)
write.csv(y, "y.csv", row.names=F)
output = cbind(x, y)
write.csv(output, "xy-20210518.csv", row.names=F)
write.table(output, "xy-202120518.tab", sep="\t", row.names=F)
plot( y ~ x, pch=x )
library(tidyverse)
library(tidyverse)
ggplot( output, aes(x=x, y=y)) + geom_point()
library(tidyverse)
ggplot( as.dataframe(output), aes(x=x, y=y)) + geom_point()
library(tidyverse)
ggplot( asdataframe(output), aes(x=x, y=y)) + geom_point()
library(tidyverse)
ggplot( dataframe(output), aes(x=x, y=y)) + geom_point()
library(tidyverse)
ggplot( as.data.frame(output), aes(x=x, y=y)) + geom_point()
View(tb2)
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
library(tidyverse)
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
library(tidyverse)
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
library(tidyverse)
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
library(reshape2)
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
plot <- ggplot(df_melt, aes(x=date, y=value, color=variable)) + stat_smooth(span=0.15)
plot + ggtitle( "ggplot")
library(reshape2)
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
#plot <- ggplot(df_melt, aes(x=date, y=value, color=variable)) + stat_smooth(span=0.15)
#plot + ggtitle( "ggplot")
View(df_melt)
library(reshape2)
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
plot <- ggplot(df_melt, aes(x=Hours, y=value, color=variable)) + stat_smooth(span=0.15)
#plot + ggtitle( "ggplot")
library(reshape2)
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
plot <- ggplot(df_melt, aes(x=Hours, y=value, color=variable)) + stat_smooth(span=0.15)
plot + ggtitle( "ggplot")
library(reshape2)
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
plot <- ggplot(df_melt, aes(x=Hours, y=value, color=variable)) + stat_smooth(span=0.3)
plot + ggtitle( "ggplot")
# a simple function
random_walk = function (n_of_steps){
x = rep( 0, n_of_steps)
for( i in 2:n_of_steps ){
x[i] = x[i-1] + rnorm(1)
}
return(x)
}
# a simple function
random_walk = function (n_of_steps){
x = rep( 0, n_of_steps)
for( i in 2:n_of_steps ){
x[i] = x[i-1] + rnorm(1)
}
return(x)
}
plot(random_walk(10))
# a simple function
random_walk = function (n_of_steps){
x = rep( 0, n_of_steps)
for( i in 2:n_of_steps ){
x[i] = x[i-1] + rnorm(1)
}
return(x)
}
plot(random_walk(100), type='l')
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
multi_return(10)
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
z[[1]]
z[[2]]
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
print( paste("x=", x))
y = z[[2]]
print( paste( "y=", y))
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
print( paste("x=", x))
y = z[[2]]
print( "y=", y))
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
print( paste("x=", x))
y = z[[2]]
print( "y=", y)
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
print( paste("x=", x))
y = z[[2]]
print(  y)
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
print( paste("x=", x))
y = z[[2]]
print( "y", y)
?print
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
print( paste("x=", x))
y = z[[2]]
print ("y=")
y
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
print( paste("x=", x))
y = z[[2]]
print ( paste("y=", ""))
y
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
print( paste("x=", x))
y = z[[2]]
print ( paste("y=", ""))
print(y)
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
print( paste("x=", x))
y = z[[2]]
print ( paste("y=", y))
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
class(x)
print( paste("x=", x))
y = z[[2]]
class(y)
library(reshape2)
selected_columns = c('Amount', "Amount2")
df_melt <- melt( tb2, measure.vars=selected_columns )
plot <- ggplot(df_melt, aes(x=Hours, y=value, color=variable)) + geom_point()
plot + ggtitle( "ggplot")
ggplot( sunflower, aes=(x=Stripes, y=Seeds))
##### plot sunflower seed data
sunflower = read.csv("SunflowerSeedData.csv");
plot( sunflower$Stripes ~ sunflower$Seeds, ylab="Stripes"
, xlab="Seeds", main="sunflower data", type="b"
, col="red"
)
ggplot( sunflower, aes=(x=Stripes, y=Seeds))
ggplot( sunflower, aes(x=Stripes, y=Seeds))
ggplot( sunflower, aes(x=Stripes, y=Seeds)) + geom_bar()
ggplot( sunflower, aes(x=Stripes)) + geom_bar()
ggplot( sunflower, aes(x=Stripes, y=Seeds)) + geom_area()
ggplot( sunflower, aes(x=Stripes, y=Seeds)) + geom_density_2d()
ggplot( sunflower, aes(x=Stripes, y=Seeds)) + geom_density()
ggplot( sunflower, aes(x=Stripes, y=Seeds)) + geom_ribbon()
ggplot( sunflower, aes(x=Stripes, y=Seeds)) + geom_histogram()
ggplot( sunflower, aes(x=Stripes, y=Seeds)) + geom_area()
View(z)
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
class(x)
print( paste("x=", x))
y = z[[2]]
class(y)
multi_return = function( N ){
x = 1:N
y = c("red", "blue", "orange")
return( list( x, y))
}
z = multi_return(10)
x = z[[1]]
class(x)
print( paste("x=", x))
y = z[[2]]
class(y)
x
y
# a simple function
n_of_steps = 100
random_walk = function (){
x = rep( 0, n_of_steps)
for( i in 2:n_of_steps ){
x[i] = x[i-1] + rnorm(1)
}
return(x)
}
plot(random_walk(100), type='l')
# a simple function
n_of_steps = 100
random_walk = function (){
x = rep( 0, n_of_steps)
for( i in 2:n_of_steps ){
x[i] = x[i-1] + rnorm(1)
}
return(x)
}
plot(random_walk(), type='l')
rm(list=ls()) #clearn my workspace
library(tidyverse)
Election20df = read_csv("https://raw.githubusercontent.com/tonmcg/US_County_Level_Election_Results_08-20/master/2020_US_County_Level_Presidential_Results.csv")
head(Election20df)
Election20df %>% select ( total_votes ) %>% sum()
sum( Election20df$total_votes )
Election20df %>% select ( total_votes ) %>% sum()
sum( Election20df$total_votes ) /1E6
Election20df %>% select ( votes_gop ) %>% sum()
Election20df %>% select ( votes_dem ) %>% sum()
mystate = "California"
Californiadf <-
Election20df %>% filter( state_name == mystate) %>%  arrange( per_point_diff)
names( Californiadf )[8] = "percentage_for_GOP"
ggplot(Californiadf, aes(percentage_for_GOP)) +  geom_histogram()
#summary(Californiadf$per_gop)
View(Californiadf)
View(Californiadf)
View(Election20df)
Statedf <-
Election20df %>% select( state_name, votes_gop, votes_dem,  total_votes ) %>% group_by( state_name ) %>% summarise_if( is.numeric, sum)
Statedf$percentage_for_GOP = Statedf$votes_gop / Statedf$total_votes
ggplot(Statedf, aes(percentage_for_GOP)) +  geom_histogram()
View(Statedf)
Statedf %>% filter( percentage_for_GOP < 0.1 )
mean( Statedf$percentage_for_GOP)
quantile( Statedf$percentage_for_GOP )
groups =  cut( Statedf$percentage_for_GOP, c(0, 0.4, 0.47, 0.53, 0.6, 1) )
levels(groups) =                   c("deepblue", "blue", "swing", "red", "deepred")
Statedf$groups = groups
Censusdf = read_csv("https://raw.githubusercontent.com/hongqin/USA-census-county-level/main/USA-County-level-census-2010-2019.csv")
head(Censusdf)
Election20df$Location = paste( Election20df$county_name, Election20df$state_name, sep=", " )
Election20df$Location %in% Censusdf$Location
Election20df$Location = paste( Election20df$county_name, Election20df$state_name, sep=", " )
Election20df$Location %in% Censusdf$Location
EleCen.df = merge( Election20df, Censusdf, by="Location")
EleCen.df = merge( Election20df, Censusdf, by="Location")
View(EleCen.df)
EleCen.df = merge( Election20df, Censusdf, by="Location")
View(EleCen.df)
Statedf2 <- EleCen.df %>% select( state_name, votes_gop, votes_dem,  total_votes, '2019' ) %>% group_by( state_name ) %>% summarise_if( is.numeric, sum)
head(Statedf2)
names( Statedf2)[5] = "population"
View(Statedf2)
Statedf$population = Statedf2$population[match( Statedf$state_name , Statedf2$state_name ) ]
Statedf$population = Statedf2$population[match( Statedf$state_name , Statedf2$state_name ) ]
model1 = lm( Statedf$percentage_for_GOP ~ Statedf$population)
summary(model1)
model2 = lm(  Statedf$population ~ Statedf$groups)
summary(model2)
ggplot( Statedf, aes(x=groups, y=population)) + geom_point()
StateArea = read_csv("https://raw.githubusercontent.com/hongqin/data-USstates/master/state-areas.csv")
names( StateArea) = c("state_name", "area")
View(StateArea)
View(StateArea)
Statedf$area = StateArea$area[ match( Statedf$state_name  , StateArea$state_name ) ]
Statedf$pop_density = Statedf$population / Statedf$area
model = lm( Statedf$percentage_for_GOP ~ Statedf$pop_density)
summary(model)
View(Statedf)
ggplot( Statedf, aes(x=pop_density, y=percentage_for_GOP)) + geom_point()
Statedf3 <- Statedf %>% filter( percentage_for_GOP > 0.1)
ggplot( Statedf3, aes(x=pop_density, y=percentage_for_GOP)) +
geom_point() +
geom_smooth(method='lm')
summary(lm(Statedf3$percentage_for_GOP~ Statedf3$pop_density))
ggplot( Statedf3, aes(x=groups, y=pop_density)) + geom_boxplot()
deepred_pop_densities <-
Statedf3 %>% filter( groups == "deepred") %>% select( pop_density)
deepblue_pop_densities <-
Statedf3 %>% filter( groups == "deepblue") %>% select( pop_density)
t.test( deepblue_pop_densities, deepred_pop_densities, alternative = "greater")
ggplot(Statedf, aes(x=state_name, y=percentage_for_GOP)) + geom_bar(stat='identity', width=.5)+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(Statedf, aes(x=reorder(state_name, percentage_for_GOP), y=percentage_for_GOP)) + geom_bar(stat='identity', width=.5)+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
