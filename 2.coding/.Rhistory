help(package=seqinr);
#you should also read the manual of the packages
#### a simple example
library(seqinr);
tablecode(); #the genetic code
# read in some bacterial 16s rDNA sequences
seqs = read.fasta( "http://www.bioinformatics.org/ctls/download/data/16srDNA.fasta",seqtype="DNA");
seqs
str(seqs)
seq1 = seqs[[1]]
table( seq1 ); #nucleotide composition
GC(seq1);  # GC co
num = 1:length(seqs);
gc  = 1:length(seqs);
out = data.frame( cbind( num, gc ) );
for( i in 1:length(seqs) ) {
out$gc[i] = GC( seqs[[i]] );
}
out;
out;
write.csv(out, "gc.csv", row.names=F) # output the results
#### packages
#install packages
require("ape");
require("seqinr");
#what's in the package?
help(package=ape);
help(package=seqinr);
require("seqinr");
#what's in the package?
help(package=seqinr);
tablecode(); #the genetic code
?read.fasta
seqs = read.fasta( "http://www.bioinformatics.org/ctls/download/data/16srDNA.fasta",seqtype="DNA");
str(seqs)
seqs[[1]]
seq1 <- getncbiseq("NC_001477")
#### packages
#install packages
#require("ape");
require("seqinr");
> getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
getncbiseq = function(accession) {
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
seq1 <- getncbiseq("NC_001477")
library("seqinr");
# read in some bacterial 16s rDNA sequences
seqs = read.fasta( "http://www.bioinformatics.org/ctls/download/data/16srDNA.fasta",seqtype="DNA");
# look at the first sequence
seq1 = seqs[[1]]
table( seq1 ); #nucleotide composition
GC(seq1);  # GC content
count(seq1, 2)
count(seq1, 1)
ATconent = 1- GC(seq1)
GCcontent = GC(seq1);  # GC content
#what is the AT content?
#???
count(seq1, 2) # occurence of two-letter DNA words
count(seq1, 3) # occurence of two-letter DNA words
count(seq1, 6) # occurence of two-letter DNA words
count(seq1, 3) # occurence of 3-letter DNA words
mean( count(seq1, 3) )
mean( count(seq1, 2) )
mean( count(seq1, 1) )
count(seq1, 1) #nucleotide composition
count(seq1, 8) # occurence of 3-letter DNA words
mean( count(seq1, 8) )
median( count(seq1, 8) )
max( count(seq1, 8) )
hist(count(seq1, 8) )
hist(count(seq1, 8), br=20)
hist(count(seq1, 8), br=30)
mean( count(seq1, 8)>0 )
mean( count(seq1, 8) )
count(seq1, 8)
results['agccgacc']
?results
results = count(seq1, 8)
results['agccgacc']
results['agc']
results = count(seq1, 3)
results['agc']
install.packages("seqinr")
for ( i in 1:3) print(i);
x = c(0.5, 1.3, 10, 99, -0.3)
print(x)
print(sort(x))
list.files()
rm(list=ls())
list.files()
x = 1:10
take_even()
source('take_even.R')
x = 1:10
take_even()
source('take_even.R')
x = 1:10
take_even(x)
molar_solution <- function( x, y) {
58.433 * (x/10^3) * (y/10^3)
}
molar_solution(100, 500) #100mM 500mL NaCl
molar_solution2 <- function( conc, vol, FW) {
FW * conc * vol /10^6
}
molar_solution2( 1, 100, 58.433)
molar_solution2( 1, 100, 74.5513)
molar_solution3 <- function( conc, vol, formula) {
FWs = c(58.443, 74.5513, 84.997, 40)
names(FWs) = c('NaCl', 'KCl', 'NaNO3', 'NaOH');
FW = FWs[formula]
FW * conc * vol / 10^6
}
molar_solution3( 100, 500, 'NaCl' )
for ( i in 1:3) print(i);
for ( i in c(0.5, 1, -2, 5) ) print(i);
for ( i in c(0.5, 1, -2, 5) ) {
print( i * i)
}
for ( i in c(0.5, 1, -2, 5) ) {
print( i * i)
}
for ( i in c(0.5, 1, -2, 5) ) {
print( i * i)
}
for ( i in c(0.5, 1, -2, 5) ) {
x = i * i
print( sqrt(x))
}
i=2;
while( i<=10 ) {
print(i);
i = i + 2;
}
x = 1.5;
#if ((x<1) & (x>0)) { # & means AND
if ((x<0) | (x>1)) { # means OR
print("X is not between 0 and 1");
} else {
print("X is between 0 and 1 ");
}
x = 0.9;
#if ((x<1) & (x>0)) { # & means AND
if ((x<0) | (x>1)) { # means OR
print("X is not between 0 and 1");
} else {
print("X is between 0 and 1 ");
}
x = 0.9;
if ((x<1) & (x>0)) {
print("X is between 0 and 1 ");
} else {
print("X is not between 0 and 1");
}
x =0.5;
if ( ( ! x>1) & ( ! x<0 ) ) {
print("x is between 0 and 1");
}
if ( x == 0.5 ) {
print("50%");
}
x = c(-1, 3)
y = ifelse( x<0, -x, x );
x = c(-1, 3)
y = ifelse( x<0, -x, x );
# assign abosulte value of x to y
print(y)
x = c( 1, NA, 3, 4, 5)
xmean = mean(x, na.rm = TRUE)
y = ifelse( is.na(x), xmean, x );
# assign abosulte value of x to y
print(y)
x = c( 1, NA, 3, 4, 5)
y = ifelse( is.na(x), median(x, na.rm = T), x );
# assign abosulte value of x to y
print(y)
x = c( 1, NA, 3, 4, 5, 2)
y = ifelse( is.na(x), median(x, na.rm = T), x );
# assign abosulte value of x to y
print(y)
y = "I am global"
take_even = function( x ) {
y = c(); # a locale copy inside of loop
for( i in 1:length(x)) {
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
}
y; #the last line, return y to the main program
}
rm(list=ls())
#### a function
x = c( 1,2,3,4); #this is a global variable
#x = c(5, 4, 3, 6, 10, 12)
y = "I am global"
take_even = function( x ) {
y = c(); # a locale copy inside of loop
for( i in 1:length(x)) {
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
}
y; #the last line, return y to the main program
}
take_even = function( x ) {
y = c(); # a locale copy inside of loop
for( i in 1:length(x)) {
if ( (x[i]%% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
}
print ("inside y");
print(y)
print("end of inside")
y; #the last line, return y to the main program
}
take_even(x); # c(2,4)
y
rm(list=ls())
for ( i in 1:3) print(i);
for ( i in c(0.5, 1, -2, 5) ) print(i);
for ( i in c(0.5, 1, -2, 5) ) {
x = i * i
print( sqrt(x))
}
i=2;
while( i<=10 ) {
print(i);
i = i + 2;
}
x = 0.9;
if ((x<1) & (x>0)) {
print("X is between 0 and 1 ");
} else {
print("X is not between 0 and 1");
}
x =0.5;
if ( ( ! x>1) & ( ! x<0 ) ) {
print("x is between 0 and 1");
}
if ( x == 0.5 ) {
print("50%");
}
x= -1;
if ( ! x<0 ) {
print("non-negative");
} else {
print("negative");
}
x = c(-1, 3)
x = c( 1, NA, 3, 4, 5, 2)
y = ifelse( is.na(x), median(x, na.rm = T), x );
# assign abosulte value of x to y
print(y)
#### a function
x = c( 1,2,3,4, 7, 9); #this is a global variable
#x = c(5, 4, 3, 6, 10, 12)
y = "I am global"
take_even = function( x ) {
y = c(); # a locale copy inside of loop
for( i in 1:length(x)) {
if ( (x[i] %% 2 )== 0 ) { # x mod 2
y = c(y, x[i] );  # add a new x[i] to y
}
}
print ("inside y");
print(y)
print("end of inside")
y; #the last line, return y to the main program
}
take_even(x); # c(2,4)
#y =  take_even(x); # c(2,4)
z = take_even(x); # c(2,4);
w = take_even(1:10); #c (2,4,6,8,10)
u = -5:10;
v = take_even(u); # -4 -2  0  2  4  6  8 10
take_even(c(5,4,10,11, 100, -3, 9, 0, 3333, 5524234234))
even_total = function( x ) {
x = take_even(x);
sum(x)
}
View(even_total)
View(take_even)
even_total = function( x ) {
x = take_even(x);
sum(x)
}
x = c( 1,2,3,4, 0, -2, -4 );
u = even_total( x );
print(u)
x = c( 1,2,3,4); #this is a global variable
y = c(-1, -2, -3, -4)# this is also a global one
y.outside = y;
take_uphalf = function( x ) {
y = c(); # a local copy inside of loop
xbar = mean(x);
for( i in 1:length(x)) {
if ( x[i] > xbar ) {
y = c(y, x[i] );
}
}
y.inside = y;
y; #the last line, return y to the main program
}
w = take_uphalf(x);
mean(x)
x = c( 1,2,3,4); #this is a global variable
y = c(-1, -2, -3, -4)# this is also a global one
y.outside = y;
y.inside = NA;
take_uphalf = function( x ) {
y = c(); # a local copy inside of loop
xbar = mean(x);
for( i in 1:length(x)) {
if ( x[i] > xbar ) {
y = c(y, x[i] );
}
}
y.inside = y;
y; #the last line, return y to the main program
}
w = take_uphalf(x);
mean(x)
y.inside
x = c( 1,2,3,4); #this is a global variable
y = c(-1, -2, -3, -4)# this is also a global one
y.outside = y;
take_uphalf = function( x ) {
y = c(); # a local copy inside of loop
xbar = mean(x);
for( i in 1:length(x)) {
if ( x[i] > xbar ) {
y = c(y, x[i] );
}
}
y.inside = y;
print( paste("y.inside=", y.inside) );
y; #the last line, return y to the main program
}
w = take_uphalf(x);
mean(x)
require("ape");
require("seqinr");
install.packages(c("ape", "seqinr"))
#load packages
library(ape);
library(seqinr);
?plot
str(plot)
#what's in the package?
help(package=ape);
help(package=seqinr);
library(seqinr);
tablecode(); #the genetic code
# read in some bacterial 16s rDNA sequences
seqs = read.fasta( "http://www.bioinformatics.org/ctls/download/data/16srDNA.fasta",seqtype="DNA");
rm(list = ls())
library(seqinr);
tablecode(); #the genetic code
# read in some bacterial 16s rDNA sequences
seqs = read.fasta( "http://www.bioinformatics.org/ctls/download/data/16srDNA.fasta",seqtype="DNA");
# look at the first sequence
seq1 = seqs[[1]]
GC(seq1);  # GC content
num = 1:length(seqs);
gc  = 1:length(seqs);
out = data.frame( cbind( num, gc ) );
View(out)
for( i in 1:length(seqs) ) {
out$gc[i] = GC( seqs[[i]] );
}
View(out)
# a loop for all sequences
num = 1:length(seqs);
gc  = 1:length(seqs);
out = data.frame( cbind( num, gc ) );
out$samples = "TMP"
View(out)
str(seqs)
str(seqs[[1]])
seqs[[1]]$name
seqs[[1]]["name"]
names(seqs[[1]])
colnames(seqs[[1]])
Annotate(seqs[[1]])
annotate(seqs[[1]])
colnames(seqs[[1]])
seqs[[1]]
seqs[[1]]@name
attr(seqs[[1]])
attr(seqs[[1]], "name")
out
for( i in 1:length(seqs) ) {
out$gc[i] = GC( seqs[[i]] );
out$samples[i] = attr(seqs[[i]], "name")
}
View(out)
out;
write.csv(out, "gc.csv", row.names=F) # output the results
#### save and load images
save.image("Test.RData");
# delete everyting
rm(list=ls());
ls(); #nothing
load("Test.RData");
View(out)
molar_solution <- function( x, y) {
58.433 * (x/10^3) * (y/10^3)
}
molar_solution(100, 500) #100mM 500mL NaCl
molar_solution <- function( x, y) {
58.433 * (x/10^3) * (y/10^3)
}
molar_solution(10, 1000) #100mM 500mL NaCl
molar_solution2 <- function( conc, vol, FW) {
FW * conc * vol /10^6
}
molar_solution2( 1, 100, 58.433)
molar_solution2( 1, 100, 74.5513)
molar_solution2 <- function( conc, vol, FW) {
FW * conc * vol /10^6
}
molar_solution2( 100, 500, 58.433) # 1mM 100mL NaCl
molar_solution2( 100, 100, 74.5513)  #100mM 100mL KCl
molar_solution3 <- function( conc, vol, formula) {
FWs = c(58.443, 74.5513, 84.997, 40)
names(FWs) = c('NaCl', 'KCl', 'NaNO3', 'NaOH');
FW = FWs[formula]
FW * conc * vol / 10^6
}
molar_solution3( 100, 500, 'NaCl' ) #100mM 500ML NaCl
molar_solution( 1, 100)
molar_solution2( 1, 100, 58.433)
molar_solution3( 100, 1000, 'NaNO3' )
molar_solution2( 100, 1000, 74.5513) #for Kcl
molar_solution3( 1000, 1000, 'NaCl' )
install.packages(c("ape", "seqinr"))
rm(list=ls())
for ( i in 1:3) print(i);
for ( i in 2:3) print(i);
for ( i in 2:3) {
print(i);
}
for ( i in 2:3) {
print(i);
}
for ( i in 1:2) {
print(i);
}
for ( i in 0:1) {
print(i);
}
x = c( 0.1, 0.3, 1, 3, 5, 10, 0.001, 0.913 );
x[2]
x = c( 0.1, 0.3, 1, 3, 5, 10, 0.001, 0.913 );
x[3]
x = c( 0.1, 0.3, 0.5, 3, 5, 10, 0.001, 0.913 );
x[3]
rm( list=ls()) #clean up worksapce
list.files()
tb = read.csv("metric-attitude-literacy.csv", stringsAsFactors = FALSE)
tb[,1]
head(tb)
